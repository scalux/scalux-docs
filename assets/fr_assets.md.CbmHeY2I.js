import{_ as n,c as a,o as e,ae as o}from"./chunks/framework.iBmvQ__U.js";const y=JSON.parse('{"title":"Assets : Labels et Icons","description":"","frontmatter":{},"headers":[],"relativePath":"fr/assets.md","filePath":"fr/assets.md"}'),l={name:"fr/assets.md"};function p(t,s,c,r,i,D){return e(),a("div",null,s[0]||(s[0]=[o(`<h1 id="assets-labels-et-icons" tabindex="-1">Assets : <code>Labels</code> et <code>Icons</code> <a class="header-anchor" href="#assets-labels-et-icons" aria-label="Permalink to &quot;Assets : \`Labels\` et \`Icons\`&quot;">​</a></h1><p>Cette section présente deux utilitaires proposés par <code>scalux</code> pour faciliter la gestion centralisée des contenus textuels multilingues (wording) et des icônes adaptées à différents thèmes. Ces outils s’intègrent aisément dans votre logique d’état et garantissent une expérience utilisateur cohérente.</p><h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h2><p>L&#39;utilitaire <code>Labels</code> permet de définir et d&#39;utiliser des libellés en fonction de la langue active dans l&#39;application.</p><p>Avec <code>Labels</code>, vous pouvez :</p><ul><li><p>Centraliser les libellés textuels.</p></li><li><p>Gérer facilement plusieurs langues.</p></li><li><p>Assurer une interface toujours cohérente en cas de langue non définie (en basculant sur la langue par défaut).</p></li></ul><h3 id="syntaxe-et-configuration" tabindex="-1">Syntaxe et configuration <a class="header-anchor" href="#syntaxe-et-configuration" aria-label="Permalink to &quot;Syntaxe et configuration&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">LabelComponentProps</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Labels</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">language:</span><span style="color:#CE9178;"> &quot;fr&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">connectLabels</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Labels</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  options:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;fr&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;en&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  fallBack:</span><span style="color:#CE9178;"> &quot;en&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  items:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Tool:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      fr:</span><span style="color:#CE9178;"> &quot;Outil&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      en:</span><span style="color:#CE9178;"> &quot;Tool&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Edit:</span><span style="color:#CE9178;"> &quot;Edit&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    Design:</span><span style="color:#CE9178;"> &quot;Design&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Title</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">LabelComponentProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppTitle</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#D4D4D4;"> }&gt; = </span><span style="color:#DCDCAA;">connectLabels</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  language</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> Title</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Titles</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppTitle</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;"> // </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Outil</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppTitle</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#808080;"> /&gt;</span><span style="color:#D4D4D4;"> // </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Edit</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><h3 id="explications-du-code" tabindex="-1">Explications du code <a class="header-anchor" href="#explications-du-code" aria-label="Permalink to &quot;Explications du code&quot;">​</a></h3><p>Le constructeur <code>Labels</code> en retour de <code>State</code> reçoit un objet de configuration avec :</p><ul><li><strong>options</strong>: le tuple des langues gérées.</li><li><strong>fallback</strong>: la langue par défaut (doit appartenir à options).</li><li><strong>items</strong>: un dictionnaire définissant pour chaque clé : <ul><li>Soit une chaîne de caractères statique (utilisée pour toutes les langues).</li><li>Soit un objet associant chaque langue à un libellé spécifique.</li></ul></li></ul><p><code>Labels</code> retourne le connecteur <code>connectLabels</code> qui attend en configuration :</p><ul><li>language: une fonction sélecteur qui retourne la langue active depuis l&#39;état.</li><li>render: un composant <code>React.FC&lt;LabelsComponentProps&gt;</code> avec <code>type LabelsComponentProps = {text: string}</code></li></ul><h3 id="fonctionnement-et-gestion-des-cas-particuliers" tabindex="-1">Fonctionnement et gestion des cas particuliers <a class="header-anchor" href="#fonctionnement-et-gestion-des-cas-particuliers" aria-label="Permalink to &quot;Fonctionnement et gestion des cas particuliers&quot;">​</a></h3><ul><li><p>Sélection de la langue : Le sélecteur <code>(state: RootState) =&gt; string</code> permet de déterminer la langue active. Si la langue retournée n&#39;est pas définie dans options, le wording bascule automatiquement sur la langue spécifiée en default. Cela garantit que l’interface affiche toujours un libellé valide.</p></li><li><p>Extensibilité : Pour ajouter une nouvelle langue, il suffit d’ajouter la clé correspondante dans le tuple options et de définir les libellés pour chaque item dans items.</p></li></ul><h2 id="icons" tabindex="-1">Icons <a class="header-anchor" href="#icons" aria-label="Permalink to &quot;Icons&quot;">​</a></h2><p>L&#39;utilitaire Icons est conçu pour gérer des icônes adaptées à différents thèmes (par exemple, clair et sombre) en centralisant leur configuration.</p><p>Avec <code>Icons</code>, vous pouvez :</p><ul><li><p>Définir des icônes spécifiques pour différents thèmes.</p></li><li><p>Contrôler les propriétés (taille et couleur) de vos icônes via des types dédiés.</p></li><li><p>Assurer que l’icône affichée correspond toujours au thème actif de l’application.</p></li></ul><h3 id="syntaxe-et-configuration-1" tabindex="-1">Syntaxe et configuration <a class="header-anchor" href="#syntaxe-et-configuration-1" aria-label="Permalink to &quot;Syntaxe et configuration&quot;">​</a></h3><p>Les icônes peuvent être personnalisées selon leur couleur et leur taille. Les types suivants sont utilisés :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconColors</span><span style="color:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;disabled&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;action&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;inherit&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;primary&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;secondary&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;info&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;warning&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconSize</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;small&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;medium&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;large&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconComponentProps</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">IconColors</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">IconSize</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">IconComponentProps</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">EditIconDark</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">EditIconLight</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">DeleteIcon</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./icons&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Icons</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">theme:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">connectIcons</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Icons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  options:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;dark&quot;</span><span style="color:#D4D4D4;">], </span><span style="color:#6A9955;">// Thèmes gérés</span></span>
<span class="line"><span style="color:#9CDCFE;">  default:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Thème par défaut</span></span>
<span class="line"><span style="color:#9CDCFE;">  items:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Edit:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      light:</span><span style="color:#9CDCFE;"> EditIconLight</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Composant pour le thème clair</span></span>
<span class="line"><span style="color:#9CDCFE;">      dark:</span><span style="color:#9CDCFE;"> EditIconDark</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Composant pour le thème sombre</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Delete:</span><span style="color:#9CDCFE;"> DeleteIcon</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Icône unique utilisée pour tous les thèmes</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppIcon</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">connectIcons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  theme</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> IconsDisplay</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppIcon</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppIcon</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Delete&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><h3 id="explications-du-code-1" tabindex="-1">Explications du code <a class="header-anchor" href="#explications-du-code-1" aria-label="Permalink to &quot;Explications du code&quot;">​</a></h3><p>Le constructeur <code>Icons</code> en retour de <code>State</code> reçoit un objet de configuration avec :</p><ul><li><strong>options</strong>: le tuple des thèmes gérés.</li><li><strong>default</strong>: le thème par défaut (doit appartenir à options).</li><li><strong>items</strong>: un dictionnaire définissant pour chaque clé : <ul><li>Soit un composant de type <code>React.FC&lt;IconComponentProps&gt;</code></li><li>Soit un objet associant chaque thème à une icône spécifique.</li></ul></li></ul><p><code>Icons</code> retourne le connecteur <code>connectIcons</code> qui attend en configuration :</p><ul><li>theme: une fonction sélecteur qui retourne le theme actif depuis l&#39;état.</li></ul><h3 id="fonctionnement-et-gestion-des-cas-particuliers-1" tabindex="-1">Fonctionnement et gestion des cas particuliers <a class="header-anchor" href="#fonctionnement-et-gestion-des-cas-particuliers-1" aria-label="Permalink to &quot;Fonctionnement et gestion des cas particuliers&quot;">​</a></h3><ul><li><p>Sélection du thème : Le sélecteur <code>(state: RootState) =&gt; string</code> permet de déterminer le thème actif. Si le thème retourné n&#39;est pas définie dans options, l&#39;icone bascule automatiquement sur le thème spécifiée en default. Cela garantit que l’interface affiche toujours une icône valide.</p></li><li><p>Extensibilité : Pour ajouter un nouveau thème, il suffit d’ajouter la clé correspondante dans le tuple options et de définir les libellés pour chaque item dans items.</p></li></ul><h3 id="generation-d-icones-personnalisees-a-partir-de-fichiers-svg" tabindex="-1">Génération d&#39;icônes personnalisées à partir de fichiers SVG <a class="header-anchor" href="#generation-d-icones-personnalisees-a-partir-de-fichiers-svg" aria-label="Permalink to &quot;Génération d&#39;icônes personnalisées à partir de fichiers SVG&quot;">​</a></h3><p>Pour simplifier la création et l&#39;utilisation d&#39;icônes à partir de fichiers SVG statiques, <code>scalux</code> propose l&#39;utilitaire <code>svgIconBuilder</code>. Cet outil convertit vos fichiers SVG en composants React conformes à l&#39;interface <code>React.FC&lt;IconComponentProps&gt;</code>, facilitant ainsi leur intégration dans votre application.</p><h4 id="fonctionnement" tabindex="-1">Fonctionnement <a class="header-anchor" href="#fonctionnement" aria-label="Permalink to &quot;Fonctionnement&quot;">​</a></h4><p>L&#39;utilitaire <code>svgIconBuilder</code> reçoit en paramètre le chemin relatif vers le répertoire contenant vos fichiers statiques.</p><p>Il se combine ensuite avec la méthode <code>.useIcons</code>, laquelle attend un objet associant chaque nom d’icône au nom du fichier SVG correspondant (sans extension).</p><h4 id="exemple-pratique" tabindex="-1">Exemple pratique <a class="header-anchor" href="#exemple-pratique" aria-label="Permalink to &quot;Exemple pratique&quot;">​</a></h4><p>Sous Vite, le dossier des fichiers statiques se trouve généralement dans <code>/public</code>. Pour créer des icônes à partir des fichiers <code>/public/svg/save.svg</code> et <code>/public/svg/open.svg</code>, procédez comme suit :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">svgIconBuilder</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Save</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Open</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">svgIconBuilder</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/svg&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">useIcons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  Save:</span><span style="color:#CE9178;"> &quot;save&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Open:</span><span style="color:#CE9178;"> &quot;open&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Save et Open sont de type <code>React.FC&lt;IconComponentProps&gt;</code>.</p>`,39)]))}const d=n(l,[["render",p]]);export{y as __pageData,d as default};
