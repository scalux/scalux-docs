import{_ as n,c as a,o as e,ae as o}from"./chunks/framework.iBmvQ__U.js";const d=JSON.parse('{"title":"Basics","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/en/basics.md","filePath":"scalux/en/basics.md"}'),t={name:"scalux/en/basics.md"};function l(p,s,r,c,i,D){return e(),a("div",null,s[0]||(s[0]=[o(`<h1 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-label="Permalink to &quot;Basics&quot;">​</a></h1><p>Here is how to start a full <strong>React‑Redux</strong> application in just a few lines with <strong><code>scalux</code></strong>, using a minimal counter example.</p><p>On this page you will learn how to:</p><ul><li>define an application&#39;s initial state</li><li>connect a component to that state</li><li>build the Redux store.</li></ul><h2 id="the-counter" tabindex="-1">The counter <a class="header-anchor" href="#the-counter" aria-label="Permalink to &quot;The counter&quot;">​</a></h2><p>The example below shows how to set up a counter with:</p><ul><li>the initial state generated via <strong><code>State</code></strong></li><li>a connected component generated by <strong><code>Component</code></strong></li><li>the assembly of the Redux store with <strong><code>register</code></strong> and <strong><code>configureStore</code></strong>.</li></ul><h3 id="step-1-defining-the-initial-state-and-connecting-the-components" tabindex="-1">Step 1 : Defining the initial state and connecting the components <a class="header-anchor" href="#step-1-defining-the-initial-state-and-connecting-the-components" aria-label="Permalink to &quot;Step 1 : Defining the initial state and connecting the components&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app.tsx</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Create the initial state and generate the builders</span></span>
<span class="line"><span style="color:#6A9955;">// The state must be an object (not a primitive value)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Display component definition</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> CounterProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  increment</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  decrement</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Counter</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">decrement</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">CounterProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Increment value&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Increment</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Decrement value&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> decrement</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Decrement</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Assemble the connected component</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> CounterComponent</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;Counter&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Action type prefix (e.g. &quot;Counter/increment&quot;)</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> Counter</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  data</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    increment</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#DCDCAA;">    decrement</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Register the handlers in Redux and generate the reducer.</span></span>
<span class="line"><span style="color:#6A9955;">// register must be called once all components have been defined.</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><h3 id="step-2-creating-the-store" tabindex="-1">Step 2 : Creating the store <a class="header-anchor" href="#step-2-creating-the-store" aria-label="Permalink to &quot;Step 2 : Creating the store&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/store.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./app&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">// scalux re‑exports redux‑toolkit’s configureStore</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">configureStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">// Example of adding custom middleware</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">userDefinedMiddleware</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./middlewares&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">configureStore</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  reducer</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  middleware</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">getDefaultMiddleWare</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> getDefaultMiddleWare</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="step-3-using-the-component-in-the-application" tabindex="-1">Step 3 : Using the component in the application <a class="header-anchor" href="#step-3-using-the-component-in-the-application" aria-label="Permalink to &quot;Step 3 : Using the component in the application&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/main.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Re‑export of react‑redux’s Provider;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> ReactDOM</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;react-dom/client&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./components&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./store&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ReactDOM</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createRoot</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Provider</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">CounterComponent</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Provider</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>The remainder of this page explains each of these concepts in detail.</p><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><ul><li><strong><code>State</code></strong>, exported by <strong><code>scalux</code></strong>, defines the initial state from a serialisable data object.</li><li>The type of the state is inferred, and type annotations can be added to handle more complex situations (e.g. union types).</li></ul><h2 id="component" tabindex="-1">Component <a class="header-anchor" href="#component" aria-label="Permalink to &quot;Component&quot;">​</a></h2><p>The <strong><code>Component</code></strong> constructor returned by <strong><code>State</code></strong> connects a component to the application state.</p><p>It takes a configuration object with the following properties:</p><ul><li><p><strong>domain</strong> – A string used as a prefix for the generated action types. <strong>No action types have to be declared manually.</strong></p><p><em>Example</em>: The handlers <code>increment</code> and <code>decrement</code> generate the action types <code>Counter/increment</code> and <code>Counter/decrement</code> respectively.</p><p><strong>Note</strong>: The domain must be unique within the application. A duplicate will not go unnoticed: it triggers an initialisation error with a debug message to help pinpoint the source.</p></li><li><p><strong>render</strong> – A functional React component whose prop types are essential.</p><p><code>scalux</code> separates the component’s props by inference into two categories:</p><ul><li><strong>HandlerProps</strong> of type<div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">SomePayload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;"> | () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span></span></code></pre></div>handled by the <strong><code>handlers</code></strong> property of <strong><code>Component</code></strong>.</li><li><strong>DataProps</strong> – everything else, handled by the <strong><code>data</code></strong> property of <strong><code>Component</code></strong>.</li></ul></li><li><p><strong>data</strong> – Receives a selector whose first parameter is the state (typed by inference) and returns the <strong><code>DataProps</code></strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DataProps</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></li><li><p><strong>handlers</strong> – For each <strong><code>HandlerProp</code></strong> receives a state‑mutation function (typed by inference) whose first parameter is the state, the second an optional <strong><code>Payload</code></strong>, and which returns an object containing the state updates:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HandlerPayload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> Partial</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">InternalState</span><span style="color:#D4D4D4;">&gt;,</span></span></code></pre></div><p>In the example:</p><ul><li>The handlers <code>increment</code> and <code>decrement</code> update the <code>count</code> property.</li><li>Their payloads are <code>undefined</code> (because the handlers are of type <code>() =&gt; void</code>).</li><li><strong><code>InternalState</code></strong> is equal to <strong><code>RootState</code></strong> here; they diverge in advanced cases (e.g. history management), but the distinction will matter later.</li></ul><p>Each handler returns a subset of the internal state containing only the modified properties.<br> If we had a handler prop <code>{ doNothing: () =&gt; void }</code> then <code>{ doNothing: () =&gt; ({}) }</code> would be valid.</p></li></ul><h2 id="register" tabindex="-1">register <a class="header-anchor" href="#register" aria-label="Permalink to &quot;register&quot;">​</a></h2><p>The <strong><code>register</code></strong> function registers all reducers generated by the component handlers.</p><p><strong>⚠️ Important</strong></p><ul><li>Call <strong><code>register</code></strong> <strong>after</strong> all your connected components are defined via <strong><code>Component</code></strong>.</li><li>One (optional) way to ensure this is to call <strong><code>register</code></strong> from a file that re‑exports all components.</li><li>The reducer returned is then used to configure the Redux store.</li></ul><p>For example:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// register all the handlers defined previously</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// export the reducer to build the store</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><h2 id="wrap‐up" tabindex="-1">Wrap‑up <a class="header-anchor" href="#wrap‐up" aria-label="Permalink to &quot;Wrap‑up&quot;">​</a></h2><p>In this section we have seen how to:</p><p>✅ <strong>define a minimalist state</strong> via <strong><code>State</code></strong></p><p>✅ declare a component to render the model <strong>by separating the data (<code>DataProps</code>) from the handlers (<code>HandlerProps</code>)</strong></p><p>✅ <strong>connect a component</strong> to the state and <strong>define its action types</strong> by assembling the render component with:</p><ul><li>a domain</li><li>a data selector</li><li>handlers</li></ul><p>This simple approach covers common use cases. For more complex applications, <em>scalux</em> provides advanced tools that let you:</p><ul><li>split the state into slices, manage history and model state machines</li><li>feed components with various kinds of selectors: hard‑coded data, selectors generated from the initial state, memoisation techniques, management of <em>ownProps</em></li><li>expose externalisation methods to avoid concentrating too many handlers in a single object.</li></ul>`,34)]))}const C=n(t,[["render",l]]);export{d as __pageData,C as default};
