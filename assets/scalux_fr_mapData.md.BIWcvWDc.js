import{_ as n,c as a,o,ae as p}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"Connexion des données : Resolver","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/fr/mapData.md","filePath":"scalux/fr/mapData.md"}'),l={name:"scalux/fr/mapData.md"};function e(t,s,c,r,D,y){return o(),a("div",null,s[0]||(s[0]=[p(`<h1 id="connexion-des-donnees-resolver" tabindex="-1">Connexion des données : <code>Resolver</code> <a class="header-anchor" href="#connexion-des-donnees-resolver" aria-label="Permalink to &quot;Connexion des données : \`Resolver\`&quot;">​</a></h1><h2 id="rappels-sur-component" tabindex="-1">Rappels sur <code>Component</code> <a class="header-anchor" href="#rappels-sur-component" aria-label="Permalink to &quot;Rappels sur \`Component\`&quot;">​</a></h2><p>Le constructeur <code>Component</code> issu de <code>State</code> permet de connecter de manière <em>typesafe</em> un composant React fonctionnel à ses données et à ses modificateurs d&#39;état.</p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p><code>Component</code> en paramètre un objet de configuration avec quatre propriétés :</p><ul><li><p><strong>domain</strong> : nom unique dans l&#39;application qui préfixe les types des actions dispatchées depuis le composant : <code>componentDomain/action1</code>, <code>componentDomain/action2</code>, etc. Une erreur d&#39;initialisation détecte la duplication d&#39;un <code>domain</code> en en précisant la source.</p></li><li><p><strong>render</strong> : le composant React fonctionnel responsable de l&#39;affichage des données qui lui sont fournies</p></li><li><p><strong>data</strong> : propriété permettant de connecter le composant à ses données (les <code>DataProps</code>)</p></li><li><p><strong>handlers</strong> : propriété permettant de connecter le système événementiel du composant aux modificateurs d&#39;état de l&#39;application via ses <code>HandlerProps</code></p></li></ul><h3 id="dataprops-et-handlerprops" tabindex="-1"><code>DataProps</code> et <code>HandlerProps</code> <a class="header-anchor" href="#dataprops-et-handlerprops" aria-label="Permalink to &quot;\`DataProps\` et \`HandlerProps\`&quot;">​</a></h3><ul><li><p>Les <code>HandlerProps</code> sont les <em>props</em> du composant de type:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;"> | ((</span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;">)</span></span></code></pre></div><p>Chacune de ces propriétés sera associée sous la clé <strong>handlers</strong> de <code>Component</code> à un handler qui permettra:</p><ul><li>d&#39;interragir avec l&#39;état (et souvent de le modifier)</li><li>d&#39;initier des requêtes API (web API, worker)</li><li>d&#39;effectuer des effets de bord (intéraction avec le système de fichier par exemples)</li></ul></li><li><p>Les <code>DataProps</code>sont le complémentaire des <code>HandlerProps</code>: toute propriété qui n&#39;appartient pas à <code>HandlerPros</code> appartient à <code>DataProps</code>.</p></li></ul><p><strong>Exemple</strong></p><p>Pour un composant de type :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  addTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  deleteTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  setFilter</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Ses <code>DataProps</code> (les données affichées) sont :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListDataProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Ses <code>HandlerProps</code> (les actions utilisateur) sont :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListHandlerProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#DCDCAA;">  addTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  deleteTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  setFilter</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>La suite de cette section présente comment connecter un composant à ses données via la propriété <strong>data</strong> : à l&#39;aide d&#39;un <strong>objet statique</strong> ou d&#39;un <strong>sélecteur dynamique</strong>.</p><h2 id="connection-par-objet-statique" tabindex="-1">Connection par objet statique <a class="header-anchor" href="#connection-par-objet-statique" aria-label="Permalink to &quot;Connection par objet statique&quot;">​</a></h2><p>La propriété <strong>data</strong> accepte tout simplement un objet de type <code>DataProps</code> : ce cas d&#39;usage se manifeste en phase de prototypage pour établir un placeholder lorsque les données de l&#39;état nécessaires n&#39;ont pas encore toutes été définies ou lorsque le composant nécessite uniquement une connexion à l&#39;état pour ses handlers mais que ses données sont constantes (par exemple un composants de dimensions fixes qui observe uniquement la position du curseur et les clics de l&#39;utilisateur).</p><p>Le composant obtenu est alors de type <code>React.FC</code> et directement utilisable dans le JSX sans <code>props</code> supplémentaires.</p><p><strong>Exemple</strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> XY</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> SensorProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerMove</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerDown</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppSensor</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // définition de domain, render, handlers</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#6A9955;">  // data définies directement pas un objet statique</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    width:</span><span style="color:#B5CEA8;"> 500</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    height:</span><span style="color:#B5CEA8;"> 300</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Utilisation dans le JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">AppSensor</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h3 id="gestion-des-ownprops" tabindex="-1">Gestion des OwnProps <a class="header-anchor" href="#gestion-des-ownprops" aria-label="Permalink to &quot;Gestion des OwnProps&quot;">​</a></h3><p>Les <code>OwnProps</code> sont les propriétés passées directement au composant via JSX par son parent. Leur usage devient nécessaire lorsque les données dépendent d’informations spécifiques fournies par le parent (par exemple, l’identifiant d’un élément dans une liste d&#39;items ou des paramètres d’affichage dynamiques).</p><p>Si vous passez un <strong>objet statique partiel</strong> à <strong>data</strong>, les propriétés des <code>DataProps</code> manquantes deviennent automatiquement les <code>OwnProps</code> attendues par le composant.</p><p><strong>Exemple avec OwnProps</strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> XY</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> SensorProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerMove</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerDown</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// data reçoit un objet statique vide</span></span>
<span class="line"><span style="color:#6A9955;">// Les DataProps width et height sont manquantes</span></span>
<span class="line"><span style="color:#6A9955;">// Elles doivent être passées au JSX (OwnProps) pour utiliser le composant</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppSensor</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt; = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // définition de domain, render, handlers</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {},</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Utilisation dans le JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">AppSensor</span><span style="color:#9CDCFE;"> width</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#B5CEA8;">500</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> height</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#B5CEA8;">300</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h2 id="connection-avec-un-selecteur-dynamique" tabindex="-1">Connection avec un sélecteur dynamique : <a class="header-anchor" href="#connection-avec-un-selecteur-dynamique" aria-label="Permalink to &quot;Connection avec un sélecteur dynamique :&quot;">​</a></h2><p>La propriété <strong>data</strong> peut également recevoir un sélecteur :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">OwnProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DataProps</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>C&#39;est l&#39;approche utilisée dans la majorité des exemples jusqu&#39;ici. Passer un objet au deuxième paramètre permet de définir des <code>OwnProps</code>.</p><h3 id="resolver" tabindex="-1">Resolver <a class="header-anchor" href="#resolver" aria-label="Permalink to &quot;Resolver&quot;">​</a></h3><p>L&#39;approche de création <em>inline</em> des sélecteurs utilisée jusqu&#39;ici fonctionne bien avec les cas simples (il est inutile d&#39;externaliser <code>{ data: (state) =&gt;({ value: state.counter }) }</code> par exemple).</p><p>Pour les cas plus élaborés, le constructeur <code>Resolver</code> est également en retour de la fonction <code>State</code>.</p><p>Il reçoit un sélecteur dont le premier paramètre est le <code>RootState</code>, typé par inférence, éventuellement un deuxième paramètre (pour les ownProps dans ce cas d&#39;usage) et le renvoie.</p><p><strong>Exemple avec Resolver et OwnProps</strong></p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// État initial</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Resolver</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  counters:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    counterA:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    counterB:</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> CounterName</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;CounterA&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;CounterB&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> NamedCounterProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  increment</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  decrement</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Composant affichant un compteur nommé</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> NamedCounter</span><span style="color:#D4D4D4;"> = ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  increment</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  decrement</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}: </span><span style="color:#4EC9B0;">NamedCounterProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> decrement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">-</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">+</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Définition du resolver</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> selectCounterByName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Resolver</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">    value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Assemblage du composant connecté utilisant Resolver</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> NamedCounterComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;NamedCounter&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> NamedCounter</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Sélection dynamique via Resolver</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#9CDCFE;"> selectCounterByName</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    increment</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">      counters:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">[name]:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">    decrement</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">      counters:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">[name]:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">] - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Enregistrement final</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">NamedCounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Utilisation dans le JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">NamedCounterComponent</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;counterA&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">NamedCounterComponent</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;counterB&quot;</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h2 id="wrap-up" tabindex="-1">Wrap-up <a class="header-anchor" href="#wrap-up" aria-label="Permalink to &quot;Wrap-up&quot;">​</a></h2><p>Dans cette partie, nous avons vu :</p><p>✅ <strong>Toutes les options pour connecter un composant à ses données</strong> :</p><ul><li>avec un <strong>objet statique</strong></li><li>par un <strong>selecteur dynamique</strong></li><li>en <strong>utilisant des OwnProps</strong></li></ul>`,43)]))}const d=n(l,[["render",e]]);export{C as __pageData,d as default};
