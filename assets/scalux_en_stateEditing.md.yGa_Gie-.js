import{_ as a,c as n,o,ae as l}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"State Modifications: Updater and Thunk","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/en/stateEditing.md","filePath":"scalux/en/stateEditing.md"}'),p={name:"scalux/en/stateEditing.md"};function e(t,s,c,r,D,y){return o(),n("div",null,s[0]||(s[0]=[l(`<h1 id="state-modifications-updater-and-thunk" tabindex="-1">State Modifications: <code>Updater</code> and <code>Thunk</code> <a class="header-anchor" href="#state-modifications-updater-and-thunk" aria-label="Permalink to &quot;State Modifications: \`Updater\` and \`Thunk\`&quot;">​</a></h1><p>Component interactions with the application state are handled through the <code>Updater</code> and <code>Thunk</code> constructors returned by <code>State</code>.</p><p><code>Updater</code> supports <strong>two ways</strong> of interacting with state:</p><ol><li><strong>Return a partial update tree</strong> – your go‑to for simple cases.</li><li><strong>Provide a dictionary of reducers</strong> after optional pre‑processing of the incoming data.</li></ol><p><code>Thunk</code> takes a classic Redux thunk and gives it proper typing derived from your initial state.</p><h2 id="connecting-with-a-partial-tree" tabindex="-1">Connecting with a Partial Tree <a class="header-anchor" href="#connecting-with-a-partial-tree" aria-label="Permalink to &quot;Connecting with a Partial Tree&quot;">​</a></h2><p><code>Updater</code> expects a function of type:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DeepPartial</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">InternalState</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>The first parameter is the global state, the second is an (optional) payload. The function returns a sub‑tree of <code>InternalState</code>; the leaves are the properties to update.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Updater comes back from State, just like Component</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Resolver</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  UserDetails:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &quot;John Doe&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    hasDriverLicense:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UserDetailsComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  editName</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleDriverLicense</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Externalise component logic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// RootState (1st arg) isn’t used here</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> editName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">UserDetails:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> } }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// RootState is inferred; no payload in this example</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> toggleDriverLicense</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  UserDetails:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">hasDriverLicense:</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">UserDetails</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasDriverLicense</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span></code></pre></div><h3 id="handling-asynchronous-requests" tabindex="-1">Handling Asynchronous Requests <a class="header-anchor" href="#handling-asynchronous-requests" aria-label="Permalink to &quot;Handling Asynchronous Requests&quot;">​</a></h3><p>The update function can be <strong>async</strong> and use <code>await</code> as needed.</p><h4 id="example-–-dice-roller-with-an-api-call" tabindex="-1">Example – Dice Roller with an API Call <a class="header-anchor" href="#example-–-dice-roller-with-an-api-call" aria-label="Permalink to &quot;Example – Dice Roller with an API Call&quot;">​</a></h4><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> DieRollerProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  roll</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> DieRoller</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">roll</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">DieRollerProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> ? </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;Not played yet!&quot;</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Roll the die&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> roll</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Roll!</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> roll</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;https://www.random.org/integers/?num=1&amp;min=1&amp;max=6&amp;col=1&amp;base=10&amp;format=plain&amp;rnd=new&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  );</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> text</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">text</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> value</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">trim</span><span style="color:#D4D4D4;">(), </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppDieRoller</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;Die&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> DieRoller</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  data</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    roll</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="connecting-with-a-thunk" tabindex="-1">Connecting with a Thunk <a class="header-anchor" href="#connecting-with-a-thunk" aria-label="Permalink to &quot;Connecting with a Thunk&quot;">​</a></h2><p>A <strong>thunk</strong> is a curried function whose first parameter is a payload and whose result is a function receiving Redux’s <code>dispatch</code> and <code>getState</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> thunk</span><span style="color:#D4D4D4;">: (</span></span>
<span class="line"><span style="color:#9CDCFE;">  payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">AnyAction</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>The <code>Thunk</code> constructor simply wraps such a function and wires it to the state. This is handy when you need to dispatch <strong>custom actions</strong> that fall outside the standard naming scheme:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;payload&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#F44747;">HandlerPayload</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;type&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;componentDomain/handlerName&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>A common use‑case is <strong>history management</strong>.</p><h3 id="undo-redo-history" tabindex="-1">Undo/Redo History <a class="header-anchor" href="#undo-redo-history" aria-label="Permalink to &quot;Undo/Redo History&quot;">​</a></h3><p>The action creators from <code>redux-undo</code> – <code>undo</code>, <code>redo</code>, <code>jump</code>, <code>jumpToPast</code>, <code>jumpToFuture</code>, <code>clearHistory</code> – are re‑exported by <strong>scalux</strong> under the name <code>history</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Thunk</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  /* state definition */</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> undo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">undo</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> redo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">redo</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jump</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">steps</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jump</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">steps</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jumpToPast</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jumpToPast</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jumpToFuture</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jumpToFuture</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> clearHistory</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearHistory</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>In <em>most</em> apps you only need <code>undo</code> and <code>redo</code>; these two thunks are exposed directly by <code>State</code>, so you can integrate undo/redo in a single line.</p><h2 id="using-reducers" tabindex="-1">Using Reducers <a class="header-anchor" href="#using-reducers" aria-label="Permalink to &quot;Using Reducers&quot;">​</a></h2><p>Returning an update tree is simple and expressive, but it has limits:</p><ul><li>It can get messy when you need to patch deep, distant branches.</li><li>Newcomers might find the approach confusing.</li><li>If part of the state is a dictionary (e.g. a todo map) an update tree lets you <strong>add or modify</strong> items—but <strong>cannot delete</strong> them.</li></ul><h3 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><p>To handle such cases <code>Updater</code> also accepts a <strong>configuration object</strong> with two keys:</p><table tabindex="0"><thead><tr><th>Key</th><th>Purpose</th></tr></thead><tbody><tr><td><strong>resolve</strong></td><td>A function (possibly async) whose first parameter is <code>RootState</code> and second is the handler payload.<br>It may itself be built with <code>Resolver</code>.</td></tr><tr><td><strong>updates</strong></td><td>How state actually changes.<br>• <strong>Simple state</strong> – a single function <code>(state, payload) =&gt; void</code>.<br>• <strong>Sliced state</strong> – a dictionary where each <em>impacted</em> slice gets its own reducer function.</td></tr></tbody></table><p>Example signatures:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// simple state</span></span>
<span class="line"><span style="color:#C8C8C8;">updates</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolveReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// sliced state</span></span>
<span class="line"><span style="color:#C8C8C8;">updates</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#C8C8C8;">  slice1</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolveReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#C8C8C8;">  slice3</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolveReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>The reducer functions mutate <code>state</code> with <em>dot notation</em>; immutability is guaranteed thanks to <strong>Immer</strong>.</p><h2 id="wrap‐up" tabindex="-1">Wrap‑up <a class="header-anchor" href="#wrap‐up" aria-label="Permalink to &quot;Wrap‑up&quot;">​</a></h2><p>✅ <strong>Asynchronous logic</strong> in handlers via <code>async/await</code>.</p><p>✅ <strong>Typed Redux thunks</strong> for custom dispatch.</p><p>✅ <strong>History integration</strong> – full control with <code>history</code>, or one‑liners <code>undo</code>/<code>redo</code> for 90 % of cases.</p><p>✅ <strong>Complex interactions</strong> extracted from the UI into well‑structured <code>Updater</code>s (optionally with <code>Resolver</code>).</p>`,38)]))}const d=a(p,[["render",e]]);export{C as __pageData,d as default};
