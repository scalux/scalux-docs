import{_ as n,c as a,o,ae as l}from"./chunks/framework.iBmvQ__U.js";const d=JSON.parse('{"title":"Assets: Labels and Icons","description":"","frontmatter":{},"headers":[],"relativePath":"en/assets.md","filePath":"en/assets.md"}'),e={name:"en/assets.md"};function t(p,s,c,r,i,D){return o(),a("div",null,s[0]||(s[0]=[l(`<h1 id="assets-labels-and-icons" tabindex="-1">Assets: <code>Labels</code> and <code>Icons</code> <a class="header-anchor" href="#assets-labels-and-icons" aria-label="Permalink to &quot;Assets: \`Labels\` and \`Icons\`&quot;">​</a></h1><p>This section introduces two utilities provided by <strong><code>scalux</code></strong> that make it easy to centrally manage multilingual text content (labels) and icons adapted to different themes. These tools integrate seamlessly with your state logic and guarantee a consistent user experience.</p><h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h2><p>The <code>Labels</code> utility lets you define and use labels according to the language currently active in the application, either through connected React components, reactive hooks, or direct string access.</p><p>With <strong><code>Labels</code></strong>, you can:</p><ul><li>Centralise textual labels.</li><li>Easily handle several languages.</li><li>Guarantee a consistent interface when a language is undefined (by falling back to the default language).</li><li>Seamlessly integrate labels into React components (<code>connectLabels</code>, <code>useLabel</code>).</li><li>Retrieve label strings directly when needed (<code>getLabel</code>).</li></ul><h3 id="syntax-and-configuration" tabindex="-1">Syntax and configuration <a class="header-anchor" href="#syntax-and-configuration" aria-label="Permalink to &quot;Syntax and configuration&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">LabelComponentProps</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> React</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;react&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Labels</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">language:</span><span style="color:#CE9178;"> &quot;fr&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Labels configuration</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">connectLabels</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">mkUseLabel</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">getLabel</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Labels</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  options:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;fr&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;en&quot;</span><span style="color:#D4D4D4;">], </span><span style="color:#6A9955;">// Supported languages</span></span>
<span class="line"><span style="color:#9CDCFE;">  fallBack:</span><span style="color:#CE9178;"> &quot;en&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Default language</span></span>
<span class="line"><span style="color:#9CDCFE;">  items:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Tool:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      fr:</span><span style="color:#CE9178;"> &quot;Outil&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      en:</span><span style="color:#CE9178;"> &quot;Tool&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Edit:</span><span style="color:#CE9178;"> &quot;Edit&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    Design:</span><span style="color:#CE9178;"> &quot;Design&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    SearchPlaceholder:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      fr:</span><span style="color:#CE9178;"> &quot;Rechercher...&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      en:</span><span style="color:#CE9178;"> &quot;Search...&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// --- Example with connectLabels ---</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Title</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">LabelComponentProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#808080;"> &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">text</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppTitle</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">connectLabels</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  language</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Language selector</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> Title</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Titles</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppTitle</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#808080;"> /&gt;</span><span style="color:#569CD6;"> {</span><span style="color:#6A9955;">/* &lt;h1&gt;Outil&lt;/h1&gt; (if language=&quot;fr&quot;) */</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppTitle</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#808080;"> /&gt;</span><span style="color:#569CD6;"> {</span><span style="color:#6A9955;">/* &lt;h1&gt;Edit&lt;/h1&gt; */</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// --- Example with useLabel ---</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> useLabel</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkUseLabel</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Create the hook with the selector</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> MyInputComponent</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> placeholder</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useLabel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;SearchPlaceholder&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Hook to get reactive text</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> tooltip</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useLabel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">      type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">      placeholder</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">placeholder</span><span style="color:#569CD6;">}</span><span style="color:#6A9955;"> // Use as a prop</span></span>
<span class="line"><span style="color:#9CDCFE;">      title</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">tooltip</span><span style="color:#569CD6;">}</span><span style="color:#6A9955;"> // Use as a prop</span></span>
<span class="line"><span style="color:#808080;">    /&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  );</span></span>
<span class="line"><span style="color:#6A9955;">  // If state.language changes from &quot;fr&quot; to &quot;en&quot;,</span></span>
<span class="line"><span style="color:#6A9955;">  // placeholder will become &quot;Search...&quot; and tooltip will become &quot;Tool&quot; automatically.</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// --- Example with getLabel ---</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> logLabels</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> toolLabelDefault</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLabel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Uses fallback language (&quot;en&quot;) -&gt; &quot;Tool&quot;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> toolLabelFrench</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLabel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Tool&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;fr&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Forces French -&gt; &quot;Outil&quot;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> editLabel</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLabel</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Static label -&gt; &quot;Edit&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">toolLabelDefault</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">toolLabelFrench</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">editLabel</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><h3 id="code-walkthrough" tabindex="-1">Code walkthrough <a class="header-anchor" href="#code-walkthrough" aria-label="Permalink to &quot;Code walkthrough&quot;">​</a></h3><p>The <code>Labels</code> function (returned by <code>State</code>) receives a configuration object containing:</p><ul><li><strong>options</strong> – the tuple of supported languages.</li><li><strong>fallback</strong> – the default language (must be one of <code>options</code>).</li><li><strong>items</strong> – an object where each key maps to either: <ul><li>a static string (used for all languages), or</li><li>an object that assigns a specific label for each language.</li></ul></li></ul><p><code>Labels</code> returns an object containing <code>connectLabels</code>, <code>mkUseLabel</code>, and <code>getLabel</code>:</p><ol><li><p><strong><code>connectLabels</code></strong>: A Higher-Order Component (HOC) connector that expects:</p><ul><li><strong>language</strong> – a selector function that returns the active language from the state.</li><li><strong>render</strong> – a <code>React.FC&lt;LabelComponentProps&gt;</code> where <code>type LabelComponentProps = { text: string }</code>. It injects the correct label as the <code>text</code> prop.</li></ul></li><li><p><strong><code>mkUseLabel</code></strong>: A factory function that creates a React hook.</p><ul><li>It expects the <strong>same <code>language</code> selector</strong> as <code>connectLabels</code>.</li><li>It returns the <strong><code>useLabel</code></strong> hook. This hook takes an <code>item</code> key as an argument (<code>useLabel(&quot;itemKey&quot;)</code>) and returns the corresponding label string. The hook is <strong>reactive</strong>: if the language changes in the state, the component using the hook will re-render with the new label. Ideal for props like <code>placeholder</code>, <code>aria-label</code>, <code>title</code>, etc.</li></ul></li><li><p><strong><code>getLabel</code></strong>: A simple function for direct access.</p><ul><li>Syntax: <code>getLabel(item: keyof items, language?: string): string</code>.</li><li>It takes the item key and optionally a language.</li><li>If <code>language</code> is provided and valid, it returns the label for that language.</li><li>If <code>language</code> is omitted or invalid, it uses the language defined in <code>fallback</code>.</li><li>This function is <strong>not reactive</strong> to state changes and can be used outside of React or when reactivity is not needed.</li></ul></li></ol><h3 id="behaviour-and-edge-case-handling" tabindex="-1">Behaviour and edge-case handling <a class="header-anchor" href="#behaviour-and-edge-case-handling" aria-label="Permalink to &quot;Behaviour and edge-case handling&quot;">​</a></h3><ul><li><p><strong>Language selection</strong></p><ul><li>For <code>connectLabels</code> and <code>useLabel</code> (via <code>mkUseLabel</code>), the selector <code>(state: RootState) =&gt; string</code> determines the active language. If the returned language is not listed in <code>options</code>, the text automatically falls back to the language defined in <code>fallback</code>, ensuring the UI always displays a valid label and reacts to state changes.</li><li>For <code>getLabel</code>, if the <code>language</code> argument is not provided or is not in <code>options</code>, the <code>fallback</code> language is used.</li></ul></li><li><p><strong>Extensibility</strong></p><ul><li>To add a new language, simply add its key to <code>options</code> and define the corresponding labels for every item in <code>items</code> that requires a specific translation.</li></ul></li></ul><h2 id="icons" tabindex="-1">Icons <a class="header-anchor" href="#icons" aria-label="Permalink to &quot;Icons&quot;">​</a></h2><p>The <strong><code>Icons</code></strong> utility is designed to manage icons tailored to different themes (e.g. light and dark) by centralising their configuration.</p><p>With <strong><code>Icons</code></strong>, you can:</p><ul><li>Define theme-specific icons.</li><li>Control icon properties (size and colour) via dedicated types.</li><li>Ensure that the displayed icon always matches the application’s active theme.</li></ul><h3 id="syntax-and-configuration-1" tabindex="-1">Syntax and configuration <a class="header-anchor" href="#syntax-and-configuration-1" aria-label="Permalink to &quot;Syntax and configuration&quot;">​</a></h3><p>Valid icon properties are:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconColors</span><span style="color:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;disabled&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;action&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;inherit&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;primary&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;secondary&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;info&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  | </span><span style="color:#CE9178;">&quot;warning&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconSize</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;small&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;medium&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;large&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/** If both are set, customSize wins (explicit &gt; implicit). */</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> IconComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  size</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">IconSizePreset</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">  /** CSS length (px|em|rem|%, etc.). */</span></span>
<span class="line"><span style="color:#9CDCFE;">  customSize</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  color</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">IconColors</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">IconComponentProps</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">EditIconDark</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">EditIconLight</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">DeleteIcon</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./icons&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Icons</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">theme:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">connectIcons</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Icons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  options:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;dark&quot;</span><span style="color:#D4D4D4;">], </span><span style="color:#6A9955;">// Supported themes</span></span>
<span class="line"><span style="color:#9CDCFE;">  default:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Default theme</span></span>
<span class="line"><span style="color:#9CDCFE;">  items:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Edit:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      light:</span><span style="color:#9CDCFE;"> EditIconLight</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Component for light theme</span></span>
<span class="line"><span style="color:#9CDCFE;">      dark:</span><span style="color:#9CDCFE;"> EditIconDark</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Component for dark theme</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Delete:</span><span style="color:#9CDCFE;"> DeleteIcon</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Same icon for every theme</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppIcon</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">connectIcons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  theme</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> IconsDisplay</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppIcon</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Edit&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">AppIcon</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Delete&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><h3 id="code-walkthrough-1" tabindex="-1">Code walkthrough <a class="header-anchor" href="#code-walkthrough-1" aria-label="Permalink to &quot;Code walkthrough&quot;">​</a></h3><p>The <code>Icons</code> constructor (returned by <code>State</code>) receives a configuration object containing:</p><ul><li><strong>options</strong> – the tuple of supported themes.</li><li><strong>default</strong> – the default theme (must be one of <code>options</code>).</li><li><strong>items</strong> – a dictionary where each key maps to either <ul><li>a <code>React.FC&lt;IconComponentProps&gt;</code>, or</li><li>an object that assigns a theme-specific icon component for each theme.</li></ul></li></ul><p><code>Icons</code> returns <strong><code>connectIcons</code></strong>, which expects:</p><ul><li><strong>theme</strong> – a selector function that returns the active theme from the state.</li></ul><h3 id="behaviour-and-edge-case-handling-1" tabindex="-1">Behaviour and edge-case handling <a class="header-anchor" href="#behaviour-and-edge-case-handling-1" aria-label="Permalink to &quot;Behaviour and edge-case handling&quot;">​</a></h3><ul><li><p><strong>Theme selection</strong><br> The selector <code>(state: RootState) =&gt; string</code> determines the active theme. If the returned theme is not listed in <code>options</code>, the icon automatically falls back to the theme specified in <code>default</code>, ensuring the UI always displays a valid icon.</p></li><li><p><strong>Extensibility</strong><br> To add a new theme, just include its key in <code>options</code> and define icons for every item in <code>items</code>.</p></li></ul><h3 id="generating-custom-icons-from-svg-files" tabindex="-1">Generating custom icons from SVG files <a class="header-anchor" href="#generating-custom-icons-from-svg-files" aria-label="Permalink to &quot;Generating custom icons from SVG files&quot;">​</a></h3><p>To simplify creating and using icons from static SVG files, <strong><code>scalux</code></strong> offers the <code>svgIconBuilder</code> utility. This tool converts your SVG files into React components that conform to <code>React.FC&lt;IconComponentProps&gt;</code>, making integration straightforward.</p><h4 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h4><p><code>svgIconBuilder</code> takes the relative path to the directory containing your static SVG files.<br> It then combines with the <code>.useIcons</code> method, which expects an object mapping each icon name to its corresponding SVG filename (without the extension).</p><h4 id="practical-example" tabindex="-1">Practical example <a class="header-anchor" href="#practical-example" aria-label="Permalink to &quot;Practical example&quot;">​</a></h4><p>With Vite, static files usually reside in <code>/public</code>. To create icons from <code>/public/svg/save.svg</code> and <code>/public/svg/open.svg</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">svgIconBuilder</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Save</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Open</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">svgIconBuilder</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/svg&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">useIcons</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  Save:</span><span style="color:#CE9178;"> &quot;save&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Open:</span><span style="color:#CE9178;"> &quot;open&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p><code>Save</code> and <code>Open</code> are now of type <code>React.FC&lt;IconComponentProps&gt;</code>.</p>`,38)]))}const u=n(e,[["render",t]]);export{d as __pageData,u as default};
