import{_ as a,c as t,o,ae as i}from"./chunks/framework.iBmvQ__U.js";const p=JSON.parse('{"title":"Introducing scalux","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/en/intro.md","filePath":"scalux/en/intro.md"}'),l={name:"scalux/en/intro.md"};function r(n,e,c,s,d,u){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="introducing-scalux" tabindex="-1">Introducing <code>scalux</code> <a class="header-anchor" href="#introducing-scalux" aria-label="Permalink to &quot;Introducing `scalux`&quot;">​</a></h1><p><strong><code>scalux</code> radically simplifies building robust and scalable React‑Redux applications.</strong> By smartly combining Redux Toolkit with TypeScript, <code>scalux</code> wipes out traditional boilerplate and lets you focus on business logic.</p><h2 id="why-choose-scalux" tabindex="-1">Why choose <code>scalux</code>? <a class="header-anchor" href="#why-choose-scalux" aria-label="Permalink to &quot;Why choose `scalux`?&quot;">​</a></h2><h3 id="✅-boilerplate‐free-development" tabindex="-1">✅ Boilerplate‑free development <a class="header-anchor" href="#✅-boilerplate‐free-development" aria-label="Permalink to &quot;✅ Boilerplate‑free development&quot;">​</a></h3><ul><li>Full automation of action, reducer and selector creation.</li><li>Concise code: spend your time on business logic, not wiring.</li></ul><h3 id="✅-clear-centralized-state" tabindex="-1">✅ Clear, centralized state <a class="header-anchor" href="#✅-clear-centralized-state" aria-label="Permalink to &quot;✅ Clear, centralized state&quot;">​</a></h3><ul><li>A single global state—one well‑structured source of truth.</li><li>Easier management of complex state via slices, history (<code>Undoable</code>) and finite‑state machines (<code>Machine</code>).</li></ul><h3 id="✅-co‐located-and-clarified-business-logic" tabindex="-1">✅ Co‑located and clarified business logic <a class="header-anchor" href="#✅-co‐located-and-clarified-business-logic" aria-label="Permalink to &quot;✅ Co‑located and clarified business logic&quot;">​</a></h3><ul><li>Handles complex, especially asynchronous, operations that touch multiple parts of state.</li><li>Gathers everything related to a feature (e.g., API call + multi‑slice updates) in one place for better readability and maintenance.</li></ul><h3 id="✅-a-complete-batteries‐included-approach" tabindex="-1">✅ A complete <em>batteries‑included</em> approach <a class="header-anchor" href="#✅-a-complete-batteries‐included-approach" aria-label="Permalink to &quot;✅ A complete _batteries‑included_ approach&quot;">​</a></h3><ul><li>Fewer dependencies to juggle: built‑in solutions for history (undo/redo), state machines, label handling (<code>Labels</code>) and icons (<code>Icons</code>).</li></ul><h3 id="✅-seamless-redux-toolkit-integration" tabindex="-1">✅ Seamless Redux Toolkit integration <a class="header-anchor" href="#✅-seamless-redux-toolkit-integration" aria-label="Permalink to &quot;✅ Seamless Redux Toolkit integration&quot;">​</a></h3><ul><li>Instant compatibility with the existing Redux ecosystem: Redux DevTools, middleware, plugins.</li><li>Smooth migration from classic Redux projects or pure Redux Toolkit setups.</li></ul><h3 id="✅-progressive-adoption-that-fits-your-needs" tabindex="-1">✅ Progressive adoption that fits your needs <a class="header-anchor" href="#✅-progressive-adoption-that-fits-your-needs" aria-label="Permalink to &quot;✅ Progressive adoption that fits your needs&quot;">​</a></h3><ul><li>Start light with a few core concepts (<code>State</code>, <code>Component</code>, <code>Updaters</code>).</li><li>Gradually expand your app with advanced features (<code>Logic</code>, <code>Machine</code>).</li></ul><h3 id="✅-total-architectural-freedom" tabindex="-1">✅ Total architectural freedom <a class="header-anchor" href="#✅-total-architectural-freedom" aria-label="Permalink to &quot;✅ Total architectural freedom&quot;">​</a></h3><ul><li>Organize files however you like while still enjoying recommended best practices.</li></ul><h2 id="a-clear-efficient-development-workflow" tabindex="-1">A clear, efficient development workflow <a class="header-anchor" href="#a-clear-efficient-development-workflow" aria-label="Permalink to &quot;A clear, efficient development workflow&quot;">​</a></h2><p><code>scalux</code> promotes a pyramidal architecture that flows from foundations to UI:</p><ol><li><strong>Data</strong> (<code>State</code>): clearly and simply define your initial data model.</li><li><strong>Business logic</strong> (<code>Logic</code>, <code>Updater</code>): centralize and manage all state mutations with ease.</li><li><strong>Components</strong> (<code>Component</code>, <code>Resolver</code>): connect your React components efficiently to state and business logic.</li></ol><p>This clean separation of responsibilities ensures easier maintenance, simpler unit testing and effortless scalability.</p><h2 id="get-started-today" tabindex="-1">Get started today <a class="header-anchor" href="#get-started-today" aria-label="Permalink to &quot;Get started today&quot;">​</a></h2><p>Discover how <code>scalux</code> can transform the way you build React‑Redux apps.</p><ul><li><a href="./basics.html">Quick start: build your first counter in a few lines</a></li><li><a href="./modelization.html">Advanced state management: history and slicing</a></li><li><a href="./machines.html">Simplify complex logic with state machines</a></li><li><a href="./mapData.html">Easily wire your components to your data</a></li></ul><p>Welcome to a modern, clear and efficient development experience with <code>scalux</code>. 🚀</p>',25)]))}const m=a(l,[["render",r]]);export{p as __pageData,m as default};
