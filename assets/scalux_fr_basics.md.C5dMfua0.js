import{_ as n,c as a,o as e,ae as o}from"./chunks/framework.iBmvQ__U.js";const y=JSON.parse('{"title":"Bases","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/fr/basics.md","filePath":"scalux/fr/basics.md"}'),l={name:"scalux/fr/basics.md"};function p(t,s,r,c,i,D){return e(),a("div",null,s[0]||(s[0]=[o(`<h1 id="bases" tabindex="-1">Bases <a class="header-anchor" href="#bases" aria-label="Permalink to &quot;Bases&quot;">​</a></h1><p>Voici comment démarrer une application <code>React-Redux</code> complète en quelques lignes avec <code>scalux</code> à l’aide d’un exemple minimal de compteur.</p><p>Vous découvrirez sur cette page comment :</p><ul><li>définir l’état initial d&#39;une application</li><li>connecter un composant à cet état</li><li>construire le store Redux.</li></ul><h2 id="le-compteur" tabindex="-1">Le compteur <a class="header-anchor" href="#le-compteur" aria-label="Permalink to &quot;Le compteur&quot;">​</a></h2><p>L’exemple ci-dessous illustre la configuration d’un compteur avec :</p><ul><li>L’état initial via généré via <code>State</code></li><li>Un composant connecté généré par <code>Component</code></li><li>L’assemblage du store Redux grâce à <code>register</code> et <code>configureStore</code></li></ul><h3 id="etape-1-definition-l-etat-initial-et-connection-des-composants" tabindex="-1">Étape 1 : Définition l’état initial et connection des composants <a class="header-anchor" href="#etape-1-definition-l-etat-initial-et-connection-des-composants" aria-label="Permalink to &quot;Étape 1 : Définition l’état initial et connection des composants&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app.tsx</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Crée l&#39;état initial et génère les constructeurs</span></span>
<span class="line"><span style="color:#6A9955;">// L&#39;état doit être un objet (pas une valeur primitive)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Définition du composant d’affichage</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> CounterProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  increment</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  decrement</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> Counter</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">decrement</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">CounterProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Increment value&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Increment</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Decrement value&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> decrement</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Decrement</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Assemblage du composant connecté</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> CounterComponent</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;Counter&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Préfixe des types d’actions (ex: &quot;Counter/increment&quot;)</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> Counter</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  data</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    increment</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#DCDCAA;">    decrement</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Enregistre les handlers dans Redux et génère le reducer.</span></span>
<span class="line"><span style="color:#6A9955;">// register doit être appelée une fois tous les composants définis.</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><h3 id="etape-2-creer-le-store" tabindex="-1">Étape 2 : Créer le store <a class="header-anchor" href="#etape-2-creer-le-store" aria-label="Permalink to &quot;Étape 2 : Créer le store&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/store.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./app&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">// scalux réexporte la méthode configureStore de redux-toolkit</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">configureStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">// Exemple d’ajout de middleware personnalisé</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">userDefinedMiddleware</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./middlewares&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">configureStore</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  reducer</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  middleware</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">getDefaultMiddleWare</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> getDefaultMiddleWare</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="etape-3-utiliser-le-composant-dans-l-application" tabindex="-1">Étape 3 : Utiliser le composant dans l’application <a class="header-anchor" href="#etape-3-utiliser-le-composant-dans-l-application" aria-label="Permalink to &quot;Étape 3 : Utiliser le composant dans l’application&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/main.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// ré-export du Provider de react-redux;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> ReactDOM</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;react-dom/client&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Provider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./components&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./store&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ReactDOM</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createRoot</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#9CDCFE;">  document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Provider</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">store</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">CounterComponent</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Provider</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>La suite de cette page détaille chacun de ces concepts.</p><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><ul><li><code>State</code>, exporté par <code>scalux</code>, définit l’état initial à partir d’un objet de données sérialisables.</li><li>Le type de l’état est inféré, et des annotations de types peuvent être utilisées pour gérer des cas plus complexes (ex. types union).</li></ul><h2 id="component" tabindex="-1">Component <a class="header-anchor" href="#component" aria-label="Permalink to &quot;Component&quot;">​</a></h2><p>Le constructeur <code>Component</code> en retour de <code>State</code> permet de connecter un composant à l&#39;état de l&#39;application.</p><p>Il prend un objet de configuration avec les propriétés suivantes :</p><ul><li><p><strong>domain</strong>: Chaîne de caractères utilisée comme préfixe pour les types d’actions générés. <strong>Aucune action à définir manuellement.</strong></p><p><em>Exemple : Les handlers increment et decrement génèrent respectivement les action types Counter/increment et Counter/decrement</em></p><p><strong>Note</strong> : Le domaine doit être unique dans l’application. Une duplication ne restera pas silencieuse : elle déclenchera une erreur d&#39;initialisation avec un message de debug pour en trouver facilement l&#39;origine.</p></li><li><p><strong>render</strong> : Composant React fonctionnel dont le typage des props est essentiel.</p><p><code>scalux</code> sépare par inférence les propriétés du composant en deux catégories</p><ul><li>Les <code>HandlerProps</code> de type:<div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">SomePayload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;"> | () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span></span></code></pre></div>Gérées par la propriété <code>handlers</code> de <code>Component</code>.</li><li>les <code>DataProps</code>: le reste des propriétés. Gérées par la propriété <code>data</code> de <code>Component</code></li></ul></li><li><p><strong>data</strong> : recoit un sélecteur dont le premier paramètre est l&#39;état, typé par inférence et renvoie les <code>DataProps</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DataProps</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></li><li><p><strong>handlers</strong> : reçoit pour chaque <code>HandlerProp</code> une fonction de modification de l&#39;état typée par inférence, dont le premier paramètre et l&#39;état, le second une évenutelle <code>Payload</code> et renvoie un objet de mise à jour de l&#39;état:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HandlerNPayload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> Partial</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">InternalState</span><span style="color:#D4D4D4;">&gt;,</span></span></code></pre></div><p>Dans l&#39;exemple :</p><ul><li><p>Les handlers <code>increment</code> et <code>decrement</code> mettent à jour la propriété <code>count</code></p></li><li><p>les payloads sont égales à <code>undefined</code> (car les handlers sont de type <code>() =&gt; void</code>)</p></li><li><p><code>InternalState</code> vaut <code>RootState</code>: <code>InternalState</code> diffère de <code>RootState</code> dans des cas complexes (gestion d&#39;un historique), mais cette distinction est importante pour la suite</p></li><li><p>Chaque handler retourne un sous ensemble de l&#39;état interne contenant les propriétés modifiées. Si nous avions eu une handlerProp <code>{ doNothing : () =&gt; void}</code> alors <code>{ doNothing: () =&gt; ({}) }</code> est valide.</p></li></ul></li></ul><h2 id="register" tabindex="-1">register <a class="header-anchor" href="#register" aria-label="Permalink to &quot;register&quot;">​</a></h2><p>La fonction <code>register</code> enregistre tous les reducers générés par les handlers des composants.</p><p><strong>⚠️ Important</strong> :</p><ul><li>Appelez <code>register</code> <strong>après</strong> avoir défini tous vos composants connectés via <code>Component</code>.</li><li>Un moyen (facultatif) de s&#39;en assurer est d&#39;appeler <code>register</code> dans un fichier d&#39;où sont exportés tous les composants.</li><li>Le reducer retourné est ensuite utilisé pour configurer le store Redux.</li></ul><p>Par exemple :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// enregistre tous les handlers définis précédemment</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// exporte le reducer pour construire le store</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><h2 id="wrap-up" tabindex="-1">Wrap-up <a class="header-anchor" href="#wrap-up" aria-label="Permalink to &quot;Wrap-up&quot;">​</a></h2><p>Dans cette partie nous avons vu comment :</p><p>✅ <strong>définir un état minimaliste</strong> : via <code>State</code></p><p>✅ définir un composant pour rendre le modèle <strong>en séparant les données (<code>DataProps</code>) des handlers (<code>HandlerProps</code>)</strong></p><p>✅ <strong>connecter un composant</strong> à l&#39;état et <strong>définir ses action types</strong> en assemblant le composant de rendu avec :</p><ul><li>un domaine</li><li>un sélecteur de données</li><li>des handlers</li></ul><p>Cette approche simple convient aux cas d’usage courants. Pour des applications plus complexes, scalux offre des outils avancés qui permettent de :</p><ul><li>Découper l’état en tranches, gérer l’historique et modéliser des automates.</li><li>Alimenter les composants via différents types de sélecteurs : données en dur, sélecteurs générés depuis l&#39;état initial, techniques de mémoïsation, gestion des ownProps.</li><li>Expose des méthodes d&#39;externalisation pour éviter de centraliser trop de handlers dans un seul objet.</li></ul>`,34)]))}const C=n(l,[["render",p]]);export{y as __pageData,C as default};
