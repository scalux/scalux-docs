import{_ as n,c as a,o,ae as l}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"Machines à état","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/fr/machines.md","filePath":"scalux/fr/machines.md"}'),p={name:"scalux/fr/machines.md"};function e(t,s,c,r,D,i){return o(),a("div",null,s[0]||(s[0]=[l(`<h1 id="machines-a-etat" tabindex="-1">Machines à état <a class="header-anchor" href="#machines-a-etat" aria-label="Permalink to &quot;Machines à état&quot;">​</a></h1><h2 id="problematique" tabindex="-1">Problématique <a class="header-anchor" href="#problematique" aria-label="Permalink to &quot;Problématique&quot;">​</a></h2><p>Un composant peut devoir réagir aux événements différemment selon l&#39;état de l&#39;application.</p><p>Exemples courants :</p><ul><li>Jeux vidéo</li><li>Canvas de dessin</li></ul><p>Exemple simple : <strong>bouton poussoir</strong></p><ul><li>Un événement : <code>press button</code></li><li>Deux états : <code>on</code> ou <code>off</code></li><li>Deux actions possibles selon l&#39;état actuel : <ul><li>Si état <code>on</code> → action : éteindre</li><li>Si état <code>off</code> → action : allumer</li></ul></li></ul><p>Cet automate très simple ne nécessite pas de méthodologie dédiée particulière :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">status:</span><span style="color:#CE9178;"> &quot;on&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;on&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;off&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleSwitch</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  status:</span><span style="color:#9CDCFE;"> status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;on&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&quot;off&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;on&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span></code></pre></div><p>Considérons maintenant une situation plus complexe :</p><ul><li>Un jeu de plateau (échecs par exemple).</li><li>Un composant <code>Board</code> traitant deux types d&#39;événements : <code>clic</code> et <code>déplacement du curseur</code>.</li><li>Déplacer une pièce nécessite plusieurs étapes : <ol><li>Cliquer sur une pièce pour la sélectionner</li><li>Déplacer le curseur (la pièce suit alors le curseur)</li><li>Cliquer sur une case cible pour déposer la pièce</li></ol></li></ul><p>La réaction à un événement dépend alors de plusieurs facteurs :</p><ul><li>État de sélection : <ul><li>Si aucune pièce n&#39;est sélectionnée → sélection de la pièce cliquée.</li><li>Si une pièce est sélectionnée → dépôt de cette pièce sur la nouvelle case.</li></ul></li><li>Tour du joueur : <ul><li>Si c&#39;est le tour du joueur actif → coup joué immédiatement.</li><li>Sinon → coup pré-enregistré, joué automatiquement dès que le tour arrive (sauf annulation).</li></ul></li></ul><p>Exemple de logique conditionnelle complexe :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  selectedPiece:</span><span style="color:#569CD6;"> null</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> null</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  turn:</span><span style="color:#CE9178;"> &quot;white&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  player:</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // autres propriétés du jeu</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> boardClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  ({ </span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">turn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">player</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">clickedPiece</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">player</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">turn</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // logique de dépôt</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // logique de sélection</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // logique de pré-enregistrement de coup</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // logique de pré-sélection ou autre action</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Même avec seulement trois propriétés (<code>selectedPiece</code>, <code>turn</code>, <code>player</code>), la lisibilité du code diminue rapidement.</p><p>Dans des cas encore plus élaborés, cette approche peut vite devenir ingérable.</p><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to &quot;Modes&quot;">​</a></h2><p>Les automates finis (ou machines à état) constituent une structure clé en informatique, soutenue par une solide base théorique.</p><p>Dans nos applications, nous utiliserons une approche simplifiée :</p><ul><li>Concevoir un automate consiste à nommer des états pour leur associer un traitement événementiel spécifique.</li><li>Ces états nommés sont appelés <strong>modes</strong>, langage familier aux applications : mode de jeu, mode &quot;dessin&quot;, mode &quot;sélection&quot;.</li></ul><p>Cette abstraction évite des imbrications de conditions et améliore la lisibilité et la maintenance.</p><h2 id="instancier-un-automate-machine" tabindex="-1">Instancier un automate : Machine <a class="header-anchor" href="#instancier-un-automate-machine" aria-label="Permalink to &quot;Instancier un automate : Machine&quot;">​</a></h2><p><code>scalux</code> permet d&#39;exprimer les modes de manière expressive et composable à l&#39;aide d&#39;arbres.</p><h3 id="machine" tabindex="-1">Machine <a class="header-anchor" href="#machine" aria-label="Permalink to &quot;Machine&quot;">​</a></h3><p>Prend en paramètre un arbre de modes. Par convention les feuilles valent <code>null</code></p><h3 id="modestree" tabindex="-1">modesTree <a class="header-anchor" href="#modestree" aria-label="Permalink to &quot;modesTree&quot;">​</a></h3><p>En retour du constructeur <code>Machine</code>. Ses feuilles sont les chemins jusqu&#39;aux feuilles de l&#39;arbre passés en paramètre de Machine, les clés étant séparées par &quot;/&quot;. Elles constituent l&#39;ensemble des modes de la machine.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Machine</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TreePaths</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// sous modes</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> playingModes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  piecePicking:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  pieceDumping:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// modes principaux</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> modes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  userPlaying:</span><span style="color:#9CDCFE;"> playingModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  opponentPlaying:</span><span style="color:#9CDCFE;"> playingModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/state/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Modes</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;../machines&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  selectedPiece:</span><span style="color:#569CD6;"> null</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> null</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  turn:</span><span style="color:#CE9178;"> &quot;white&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  player:</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  currentMode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// &quot;opponentPlaying/piecePicking&quot;</span></span>
<span class="line"><span style="color:#6A9955;">  // autres propriétés du jeu</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> boardClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">clickedPiece</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // une pièce est sélectionnée, on passe donc dans le mode de dépôt</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pieceDumping</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // ... autres modifications de la logique de sélection</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pieceDumping</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // le coup est joué, tour à l&#39;adversaire, on peut jouer un pré-coup</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // ... autres modifications de la logique de dépôt</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // une pièce est sélectionnée, on passe donc dans le mode de dépôt</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // ... autres modifications de la logique de pré-sélection</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#6A9955;">  // correspond au mode opponentPlaying.pieceDumping</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // la pièce est déposéee, on repasse dans le mode sélection en attendant son tour</span></span>
<span class="line"><span style="color:#9CDCFE;">      modes:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // ... autre modifications de la logique de  pré-dépôt</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>La logique conditionnelle a été complètement applatie. Seule la variable d&#39;état dédiée <code>mode</code> est utilisée. Cette approche réduit considérablement la complexité du code et améliore sa lisibilité ainsi que sa maintenabilité.</p><h2 id="macromodes-et-submodes" tabindex="-1">Macromodes et Submodes <a class="header-anchor" href="#macromodes-et-submodes" aria-label="Permalink to &quot;Macromodes et Submodes&quot;">​</a></h2><p><strong>macroMode</strong> : chemin partiel partant de la racine <strong>subMode</strong>: chemin partiel arrivant à une feuille</p><p>Considérons les modes (simplifiés) d&#39;une application architecturale :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Machine</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TreePaths</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> viewModes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  wall:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    firstPoint:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    secondPoint:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;">  navigate:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> modes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  root:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    planeView:</span><span style="color:#9CDCFE;"> viewModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    view3D:</span><span style="color:#9CDCFE;"> viewModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">subModes</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>Lorsque les modes utilisent fortement la composition, on veut pouvoir effectuer deux types de transition :</p><ul><li><p><strong>Changer de macroMode sans changer le subMode</strong> : Par exemple, passer de &quot;root/planeView/wall/firstPoint&quot; à &quot;root/view3D/wall/firstPoint&quot;, en conservant le subMode &quot;wall/firstPoint&quot;.</p></li><li><p><strong>Changer de subMode sans changer le macroMode</strong> : Par exemple, passer de &quot;root/planeView/wall/firstPoint&quot; à &quot;root/planeView/wall/secondPoint&quot;, sans avoir à vérifier manuellement si le macroMode est &quot;planeView&quot; ou &quot;view3D&quot;.</p></li></ul><p>L&#39;objet en retour de <code>Machine</code> contient pour cela deux proriétés : macroModes et subModes.</p><p>macroModes et subModes prennent respectivement en paramètre un macroMode et un subMode.</p><p>Ces fonctions renvoient deux propriétés :</p><ul><li><p><strong>match</strong> : fonction qui prend en paramètre un mode et renvoie un booléen déterminant s&#39;il contient le macroMode (respectivement subMode) passé à <code>macroModes</code> (respectivement <code>subModes</code>)</p></li><li><p><strong>next</strong> : fonction qui prend en paramètres :</p><ul><li>le macroMode (respectivement subMode) remplaçant celui passé en paramètre de <code>macroModes</code> (respectivement <code>subModes</code>)</li><li>un mode</li></ul><p>renvoie le mode mis à jour</p><p>Note :</p><ul><li>le macroMode (subMode) de mise à jour est typé statiquement en fonction du macroMode (subMode) passé en paramètre de <code>macroModes</code> (<code>subModes</code>) : next ne peut pas renvoyer de mode invalide</li></ul></li></ul><h3 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><p>Dans notre application de dessin :</p><ul><li>on veut pouvoir basculer entre vue en plan et vue 3D sans modifier le sous-mode de dessin</li><li>dans un sous-mode : <ul><li><strong>click</strong> a pour effet : navigate → firstPoint, firstPoint → secondPoint, secondPoint → navigate</li><li><strong>escape</strong> a pour effet : secondPoint → firstPoint, firstPoint → navigate, navigate → navigate</li></ul></li></ul><p>Cela se traduit par :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/state/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">subModes</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Modes</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;../machines&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  currentMode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">navigate</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> toggleViewKind</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> planeViewModes</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> view3DModes</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/view3D&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">planeViewModes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentModes</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> planeViewModes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/view3D&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // forcément dans views3DModes</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> view3DModes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> navigate</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> firstPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> secondPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/secondPoint&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">navigate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> navigate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/secondPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // forcément dans &quot;wall/secondPoint&quot;</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleEscape</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // forcément dans &quot;navigate&quot; et on y reste, pas de modification nécessaire</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> return</span><span style="color:#D4D4D4;"> {};</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="mode-options" tabindex="-1">Mode options <a class="header-anchor" href="#mode-options" aria-label="Permalink to &quot;Mode options&quot;">​</a></h2><p>Certains composants peuvent nécessiter des données extractibles des modes.</p><p>Par exemple, une prop <code>{ viewKind: &quot;planeView&quot; | &quot;view3D&quot; }</code> pour un composant <code>Controls</code> d&#39;une application de dessin afin d&#39;autoriser/bloquer les rotations de la vue.</p><p>Construire cette propriété à l&#39;aide de <code>subModes</code> est possible mais pas très expressif.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> planeViewModes</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> mkViewKind</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Mode</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#9CDCFE;"> planeViewModes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    ? { </span><span style="color:#9CDCFE;">viewKind:</span><span style="color:#CE9178;"> &quot;planeView&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">    : { </span><span style="color:#9CDCFE;">viewKind:</span><span style="color:#CE9178;"> &quot;view3D&quot;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Pour cela <code>Machine</code> renvoie également une propriété <code>mkModeOptions</code> prenant en paramètre une fonction qui reçoit l’arbre des modes et doit retourner un dictionnaire dont les valeurs sont des listes de noeuds internes de l&#39;arbre.</p><p>Pour chaque clé du dictionnaire, mkModeOptions fournit un sélecteur acceptant un mode et renvoyant la clé du noeud enfant par lequel passe le mode (ou undefined sinon).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Définition des modes comme précédemment</span></span>
<span class="line"><span style="color:#6A9955;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> machineModes</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">mkModeOptions</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">machineModes</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> modeOptions</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkModeOptions</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  wallMode:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wall</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">view3D</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wall</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">subModes</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">machineModes</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>Ici, <code>modeOptions</code> a pour type :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> modeOptions</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#6A9955;">  // Les fils de modes.root sont &quot;planeView&quot; et &quot;view3D&quot; – tous les modes les traversent</span></span>
<span class="line"><span style="color:#DCDCAA;">  viewKind</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Modes</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &quot;planeView&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;view3D&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">  // Pour modes.root.planeView.wall et modes.root.view3D.wall,</span></span>
<span class="line"><span style="color:#6A9955;">  // les fils sont &quot;firstPoint&quot; et &quot;secondPoint&quot;.</span></span>
<span class="line"><span style="color:#6A9955;">  // Certains modes (ex. modes.root.planeView.navigate) ne passent pas par ces noeuds,</span></span>
<span class="line"><span style="color:#6A9955;">  // d’où un retour de type &quot;firstPoint&quot; | &quot;secondPoint&quot; | undefined.</span></span>
<span class="line"><span style="color:#DCDCAA;">  wallMode</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Modes</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &quot;firstPoint&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;secondPoint&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Le snippet précédent devient alors :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> mkViewKind</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Mode</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#9CDCFE;"> modeOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">viewKind</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="visualisation-des-transitions" tabindex="-1">Visualisation des transitions <a class="header-anchor" href="#visualisation-des-transitions" aria-label="Permalink to &quot;Visualisation des transitions&quot;">​</a></h2><p>L&#39;utilisation de <code>mkLogger</code> présenté à la section <em>Modélistation avancée</em> est utile pour le suivi des modes.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">mkLogger</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">RootState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;state&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logCurrentMode</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkLogger</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &quot;currentMode&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Ce qui donnera dans l&#39;état initial :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Init value for currentMode: &quot;root/planeView/wall/firstPoint&quot;</span></span>
<span class="line"><span>================================================</span></span></code></pre></div><p>Puis à chaque changement de mode :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Prop currentMode changed</span></span>
<span class="line"><span>Previous value: &quot;root/planeView/wall/firstPoint&quot;</span></span>
<span class="line"><span>Next value: &quot;root/planeView/wall/secondPoint&quot;</span></span>
<span class="line"><span>================================================</span></span></code></pre></div>`,65)]))}const d=n(p,[["render",e]]);export{C as __pageData,d as default};
