import{_ as n,c as a,o as l,ae as p}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"Logic, Composants & API","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/fr/logic.md","filePath":"scalux/fr/logic.md"}'),o={name:"scalux/fr/logic.md"};function e(t,s,c,r,D,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="logic-composants-api" tabindex="-1">Logic, Composants &amp; API <a class="header-anchor" href="#logic-composants-api" aria-label="Permalink to &quot;Logic, Composants &amp; API&quot;">​</a></h1><p>L’API de scalux repose sur <strong>la progressivité</strong>. Elle propose, pour chaque macro-fonctionnalité, plusieurs niveaux d’abstraction – généralement deux ou trois – afin d’accompagner la croissance naturelle de votre application.</p><p>Dans les sections précédentes, nous avons vu deux manières d’organiser la logique d’un composant :</p><ul><li>La méthode “tout-en-un” via <code>Component</code> pour des cas simples et rapides à mettre en place.</li><li>L’approche intermédiaire introduisant <code>Resolver</code>, <code>Updater</code> et <code>Thunk</code>, qui permettent d’extraire la logique métier du composant, favorisant ainsi la lisibilité et la réutilisabilité dans des projets de taille moyenne.</li></ul><p>Dans cette partie, nous introduisons une troisième approche avec <code>Logic</code>, conçue pour les applications ambitieuses et/ou modulaires. Elle vous permettra de centraliser, typer et organiser hiérarchiquement toute votre logique métier, en dehors des composants React.</p><p><strong>Objectifs</strong></p><p>À la fin de cette section, vous saurez :</p><ul><li>Comment externaliser complètement votre logique métier, indépendamment de l’interface utilisateur.</li><li>Comment réutiliser cette logique dans des contextes variés (tests, services, workers, etc.).</li><li>Comment générer automatiquement une API typée pour interagir avec votre application sans dépendance à React.</li></ul><h2 id="logic" tabindex="-1">Logic <a class="header-anchor" href="#logic" aria-label="Permalink to &quot;Logic&quot;">​</a></h2><p>Le retour de State expose également un constructeur nommé <code>Logic</code>. Celui-ci prend en paramètre un arbre dont chaque feuille est une valeur générée via <code>Resolver</code> (ou tout sélecteur de l&#39;état avec au maximum un paramètre) ou <code>Thunk</code>.</p><p>Logic est une fonction de typage : elle ne modifie pas l’arbre, mais en valide la structure, assurant que chaque feuille respecte bien le contrat attendu (<code>Resolver</code> ou <code>Updater</code>). Elle facilite ainsi l’organisation et la lisibilité de votre logique métier.</p><h2 id="composants" tabindex="-1">Composants <a class="header-anchor" href="#composants" aria-label="Permalink to &quot;Composants&quot;">​</a></h2><p>À mesure que votre application grandit, certains <strong>sélecteurs</strong> (<code>Resolver</code>) et <strong>handlers</strong> (<code>Updater</code>, <code>Thunk</code>) deviennent partagés entre plusieurs composants. Dans ce cas, il est recommandé de les externaliser hors des dossiers de composants individuels, dans un répertoire dédié comme <code>logic</code>.</p><p>Étant donné que <code>Logic</code> est purement une fonction de typage et ne modifie pas les objets passés, il permet de <strong>composer librement les arbres de logique</strong>. Vous pouvez ainsi organiser vos sélecteurs et handlers de manière <strong>hiérarchique</strong> et <strong>modulaire</strong>, et les regrouper dans un objet <strong>centralisé</strong> (<code>logic</code>), ce qui améliore la maintenabilité.</p><h3 id="version-2-du-plus-ou-moins" tabindex="-1">Version 2 du &quot;Plus ou Moins&quot; <a class="header-anchor" href="#version-2-du-plus-ou-moins" aria-label="Permalink to &quot;Version 2 du &quot;Plus ou Moins&quot;&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/state.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Undoable</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//  État initial avec historisation (undo/redo)</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Resolver</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">undo</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">redo</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#DCDCAA;">  Undoable</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    targetValue:</span><span style="color:#569CD6;"> null</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> number</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    userValue:</span><span style="color:#B5CEA8;"> 50</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/logic.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Resolver</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">undo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">redo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Logic</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./state&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Handlers externes explicites</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> increment</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">userValue:</span><span style="color:#9CDCFE;"> userValue</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }));</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> decrement</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">userValue:</span><span style="color:#9CDCFE;"> userValue</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }));</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> setTargetValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fetchTargetValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;https://www.random.org/integers/?num=1&amp;min=1&amp;max=100&amp;col=1&amp;base=10&amp;format=plain&amp;rnd=new&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  );</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> text</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">text</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">targetValue:</span><span style="color:#DCDCAA;"> parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">trim</span><span style="color:#D4D4D4;">(), </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> guessComponentData</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Resolver</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  userValue:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">present</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  targetValue:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">present</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Arbre logique</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logic</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Logic</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  targetValue:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    setTargetValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    fetchTargetValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;">  userValue:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">decrement</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#9CDCFE;">  history:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">undo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">redo</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#9CDCFE;">  components:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    guessComponentData</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">logic</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/GuessComponent.tsx</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">logic</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./logic&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./state&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> GuessComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  userValue</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  targetValue</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  increment</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  decrement</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  fetchTargetValue</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  undo</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  redo</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Composant de rendu React</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> GuessComponent</span><span style="color:#D4D4D4;"> = ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  userValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  increment</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  decrement</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  fetchTargetValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  undo</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  redo</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  targetValue</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}: </span><span style="color:#4EC9B0;">GuessComponentProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">  useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">fetchTargetValue</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">  }, [</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> hint</span><span style="color:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#9CDCFE;">    targetValue</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">null</span></span>
<span class="line"><span style="color:#D4D4D4;">      ? </span><span style="color:#CE9178;">&quot;Chargement...&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">      : </span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">targetValue</span></span>
<span class="line"><span style="color:#D4D4D4;">      ? </span><span style="color:#CE9178;">&quot;C&#39;est plus&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">      : </span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#9CDCFE;">targetValue</span></span>
<span class="line"><span style="color:#D4D4D4;">      ? </span><span style="color:#CE9178;">&quot;C&#39;est moins&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">      : </span><span style="color:#CE9178;">&quot;Bravo, tu as trouvé ! 🎉&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Valeur : </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">userValue</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">decrement</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">-</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">increment</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">+</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">hint</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">p</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">undo</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Undo</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">redo</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Redo</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  );</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Assemblage final avec Updates et sélecteurs</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> GuessNumberApp</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;GuessNumber&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> GuessComponent</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#9CDCFE;"> logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">components</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">guessComponentData</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    increment:</span><span style="color:#9CDCFE;"> logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">increment</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    decrement:</span><span style="color:#9CDCFE;"> logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">decrement</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    undo:</span><span style="color:#9CDCFE;"> logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">undo</span></span>
<span class="line"><span style="color:#9CDCFE;">    redo</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">redo</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    fetchTargetValue:</span><span style="color:#9CDCFE;"> logic</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fetchTargetValue</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">mkApi</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">logic</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">GuessNumberApp</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mkApi</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/store.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">configureStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mkApi</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./GuessComponent&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> store</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">configureStore</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  reducer</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkApi</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><h2 id="api" tabindex="-1">Api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;Api&quot;">​</a></h2><p>La fonction <code>register</code>, issue de <code>State</code>, accepte en option l’objet <code>logic</code>.</p><p>Elle retourne un objet contenant :</p><ul><li><p><code>reducer</code> : le réducteur Redux à intégrer dans votre store</p></li><li><p><code>mkApi(store)</code> : une fonction qui, une fois appelée avec un store, retourne une API typée dérivée de votre arbre logic</p></li></ul><h3 id="structure-de-l-api-retournee" tabindex="-1">Structure de l’API retournée <a class="header-anchor" href="#structure-de-l-api-retournee" aria-label="Permalink to &quot;Structure de l’API retournée&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkApi</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>L’objet <code>api</code> contient :</p><ul><li><p><code>app</code> : un miroir de l’arbre logic</p><ul><li>Chaque <code>Value</code> devient un getter calculé à la volée depuis le state (ou une fonction d&#39;un paramètre : la payload)</li><li>Chaque <code>Handler</code> devient une fonction qui dispatch une action typée selon la convention <code>api/path/to/handler</code></li><li>Chaque <code>Thunk</code> devient également une fonction</li></ul><p>Les méthodes et sélecteurs de <code>app</code> sont asynchrones si le resolver ou la fonction de mise à jour de l&#39;arbre sont asynchrones.</p></li><li><p><code>state</code> : L’ensemble des sélecteurs automatiques générés à partir de l’état initial sous forme de getter, qui offre un accès direct aux propriétés de base de votre état.</p></li></ul><h3 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./store&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Exemple d&#39;utilisation de l&#39;API</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Dispatch d&#39;une action d&#39;incrémentation</span></span>
<span class="line"><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Accès à la valeur actuelle de userValue via le getter</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">  &quot;Valeur de userValue après incrémentation :&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Exemple d&#39;appel d&#39;une requête asynchrone pour récupérer targetValue</span></span>
<span class="line"><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fetchTargetValue</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Valeur de targetValue récupérée :&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="cas-d-usage" tabindex="-1">Cas d’usage <a class="header-anchor" href="#cas-d-usage" aria-label="Permalink to &quot;Cas d’usage&quot;">​</a></h3><p>L’API de scalux s’adresse aux scénarios où la centralisation et la standardisation de l’accès à l’état et aux handlers sont particulièrement bénéfiques. Voici quelques cas d’usage typiques :</p><p><strong>✅ Tests unitaires sans mock de React ou Redux</strong></p><p>L’API permet de tester la logique d’un composant ou d’un service sans passer par une couche UI :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;l&#39;incrément atteint la cible&quot;</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setTargetValue</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">53</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  expect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toBe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// true</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p><strong>✅ Services / Workflows métiers</strong></p><p>Dans une application complexe, il peut être nécessaire d’interroger l’état ou de dispatcher des actions depuis des modules non-UI (ex. utilitaires, services). Vous pouvez appeler <code>api.app.*</code>. et <code>api.state.*</code> dans des services sans dépendre de React ou Redux.</p><p><strong>✅ Intégration avec des effets externes (WebSocket, Workers)</strong></p><p>On peut manipuler l’état global en réponse à des événements asynchrones externes :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">socket</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;updateScore&quot;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">score</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setTargetValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">score</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p><strong>✅ Debug, scripts temporaires, visualisation</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;État courant :&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">getState</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userValue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">increment</span><span style="color:#D4D4D4;">();</span></span></code></pre></div>`,41)]))}const u=n(o,[["render",e]]);export{C as __pageData,u as default};
