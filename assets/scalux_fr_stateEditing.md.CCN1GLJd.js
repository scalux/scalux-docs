import{_ as n,c as a,o as l,ae as o}from"./chunks/framework.iBmvQ__U.js";const d=JSON.parse(`{"title":"Modifications de l'état : Updater et Thunk","description":"","frontmatter":{},"headers":[],"relativePath":"scalux/fr/stateEditing.md","filePath":"scalux/fr/stateEditing.md"}`),p={name:"scalux/fr/stateEditing.md"};function e(t,s,c,r,D,i){return l(),a("div",null,s[0]||(s[0]=[o(`<h1 id="modifications-de-l-etat-updater-et-thunk" tabindex="-1">Modifications de l&#39;état : <code>Updater</code> et <code>Thunk</code> <a class="header-anchor" href="#modifications-de-l-etat-updater-et-thunk" aria-label="Permalink to &quot;Modifications de l&#39;état : \`Updater\` et \`Thunk\`&quot;">​</a></h1><p>Les intéractions des composants avec l&#39;état de l&#39;application sont gérées via les constructeurs <code>Updater</code> et <code>Thunk</code> en retour de <code>State</code>.</p><p><code>Updater</code> supporte deux manières d&#39;intéragir avec l&#39;état :</p><ul><li>en renvoyant un arbre partiel de mise à jour de l&#39;état : votre <em>go to</em> pour les cas simples</li><li>avec un dictionnaire de réducteurs après un éventuel pré-processing de la donnée qu&#39;ils reçoivent</li></ul><p><code>Thunk</code> permet reçoit un thunk Redux qu&#39;elle permet de typer d&#39;après l&#39;état initial.</p><h2 id="connection-avec-un-arbre-partiel" tabindex="-1">Connection avec un arbre partiel <a class="header-anchor" href="#connection-avec-un-arbre-partiel" aria-label="Permalink to &quot;Connection avec un arbre partiel&quot;">​</a></h2><p><code>Updater</code> reçoit une fonction de type :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DeepPartial</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">InternalState</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>Son premier paramètre est l&#39;état global, son deuxième une payload (qui peut être laissée undefined) et elle renvoie un sous-arbre de <code>InternalState</code> dont les feuilles sont les propriétés de l&#39;état à modifier.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Updater est en retour de State, comme Component</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Resolver</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  UserDetails:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &quot;John Doe&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    hasDriverLicense:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UserDetailsComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  editName</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleDriverLicense</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Externalisation de la logique du composant</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Le premier paramètre RootState, n&#39;est pas utilisé ici</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> editName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">UserDetails:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> } }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Le paramètre RootState est typé par inférence</span></span>
<span class="line"><span style="color:#6A9955;">// Aucune payload n&#39;est utilisée en second paramètre</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> toogleDriverLicense</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  UserDetails:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">hasDriverLicense:</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">UserDetails</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasDriverLicense</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span></code></pre></div><h3 id="gestion-des-requetes-asynchrones" tabindex="-1">Gestion des requêtes asynchrones <a class="header-anchor" href="#gestion-des-requetes-asynchrones" aria-label="Permalink to &quot;Gestion des requêtes asynchrones&quot;">​</a></h3><p>La fonction de mise à jour peut être définie en tant que fonction asynchrone utilisant async/await</p><h3 id="exemple-d-une-application-de-des-avec-requete-api" tabindex="-1">Exemple d&#39;une application de dés avec requête API <a class="header-anchor" href="#exemple-d-une-application-de-des-avec-requete-api" aria-label="Permalink to &quot;Exemple d&#39;une application de dés avec requête API&quot;">​</a></h3><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> DieRollerProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  roll</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> DieRoller</span><span style="color:#D4D4D4;"> = ({ </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">roll</span><span style="color:#D4D4D4;"> }: </span><span style="color:#4EC9B0;">DieRollerProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> ? </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;Not played yet!&quot;</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> aria-label</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Roll the die&quot;</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> roll</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Roll!</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> roll</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;https://www.random.org/integers/?num=1&amp;min=1&amp;max=6&amp;col=1&amp;base=10&amp;format=plain&amp;rnd=new&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  );</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> text</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">text</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> value</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">trim</span><span style="color:#D4D4D4;">(), </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppDieRoller</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;Die&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> DieRoller</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#DCDCAA;"> Data</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> })),</span></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    roll</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="connection-avec-un-thunk" tabindex="-1">Connection avec un thunk <a class="header-anchor" href="#connection-avec-un-thunk" aria-label="Permalink to &quot;Connection avec un thunk&quot;">​</a></h2><p>Un <strong>thunk</strong> est une fonction curryfiée dont le premier paramètre est une payload et qui renvoie une fonction recevant les fonctions <code>dispatch</code> et <code>getState</code> du store redux.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> thunk</span><span style="color:#D4D4D4;">: (</span></span>
<span class="line"><span style="color:#9CDCFE;">  payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">dispatch</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">AnyAction</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">getState</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>Le constructeur <code>Thunk</code> reçoit un thunk qu&#39;il permet de connecter à l&#39;état.</p><p>Cela permet de dispatcher des actions personnalisées échappant à la nomenclature :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#C8C8C8;">    payload</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">HandlerPayload</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#C8C8C8;">    type</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;componentDomain/handlerName&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>C&#39;est par exemple utile pour déclencer des actions agissant sur le <code>RootState</code> (état global) et non l&#39;état interne des slices via des réducteurs d&#39;ordre supérieur : un des cas d&#39;usage est l&#39;historisation.</p><h3 id="gestion-de-l-historique-undo-redo" tabindex="-1">Gestion de l&#39;historique (undo/redo) <a class="header-anchor" href="#gestion-de-l-historique-undo-redo" aria-label="Permalink to &quot;Gestion de l&#39;historique (undo/redo)&quot;">​</a></h3><p>Les <code>ActionCreators</code> de <code>redux-undo</code> :</p><ul><li>undo</li><li>redo</li><li>jump</li><li>jumpToPast</li><li>jumpToFuture</li><li>clearHistory</li></ul><p>sont exportés par scalux sous le nom <code>history</code>.</p><p>D&#39;après ce qui précède, les fonctionnalités d&#39;historique peuvent être implémentées comme suit :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Thunk</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // définition de l&#39;état</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> undo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">undo</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> redo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">redo</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jump</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">steps</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jump</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">steps</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jumpToPast</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jumpToPast</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jumpToFuture</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">jumpToFuture</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> clearHistory</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Thunk</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dispatch</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> dispatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">history</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearHistory</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Dans la majorité des cas, ce sont les fonctionnalités <code>undo</code> et <code>redo</code> qui seront utilisées : les thunks <code>undo</code> et <code>redo</code> sont directement exposés en retour de <code>State</code>, permettant l&#39;intégration des fonctionnalités undo/redo en une ligne.</p><h2 id="utilisation-de-reducers" tabindex="-1">Utilisation de reducers <a class="header-anchor" href="#utilisation-de-reducers" aria-label="Permalink to &quot;Utilisation de reducers&quot;">​</a></h2><p>La modification de l&#39;état avec un arbre de mise à jour qui a été utilisée dans les exemples jusqu&#39;ici est la méthode la plus simple et la plus expressive mais elle présente des limites :</p><ul><li><p>elle peut devenir moins lisible lorsqu&#39;il s&#39;agit de modifier plusieurs valeurs profondes dans des branches éloignées</p></li><li><p>cette approche peut être déroutante pour les développeurs débutant avec <code>scalux</code></p></li><li><p>dans le cas où une donnée de l&#39;état est stockée sous forme de dictionnaire (par exemple un dictionnaire de todos), un arbre de mise à jour permet de modifier des éléments, d&#39;en ajouter mais pas d&#39;en supprimer !</p></li></ul><h3 id="principe" tabindex="-1">Principe <a class="header-anchor" href="#principe" aria-label="Permalink to &quot;Principe&quot;">​</a></h3><p>Pour traiter ces cas, <code>Updates</code> accepte également un objet de configuration à deux clés :</p><ul><li><p><strong>resolve</strong> : reçoit une fonction, éventuellement asynchrone dont le premier paramètre est le <code>RootState</code> et le second la payload du hander. La propriété <strong>resolve</strong> peut bien sûr être construite à l&#39;aide du constructeur <code>Resolver</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HandlerPayload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> RevolerReturn</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></li><li><p><strong>updates</strong> :</p><ul><li><p><strong>Etat simple</strong>: une fonction de mise à jour</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolverReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span></span></code></pre></div><p>Elle reçoit l&#39;état global, la payload en retour de <strong>resolve</strong> et modifie l&#39;état avec la dot notation (ne retourne rien, l&#39;immutabilité est assurée par <strong>Immer</strong>).</p></li><li><p><strong>Etat slicé</strong></p><p>Reçoit un dictionnaire de fonctions de mise à jour : une clé pour chaque slice impactée (les slices non impactées peuvent être ignorée)</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#C8C8C8;">  slice1</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolverReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // slice2 ignorée</span></span>
<span class="line"><span style="color:#C8C8C8;">  slice3</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">ResolverReturn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span></span>
<span class="line"><span style="color:#6A9955;">  // autres fonctions de modification</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></li></ul></li></ul><h2 id="wrap-up" tabindex="-1">Wrap-up <a class="header-anchor" href="#wrap-up" aria-label="Permalink to &quot;Wrap-up&quot;">​</a></h2><p>Dans cette partie, nous avons vu :</p><p>✅ <strong>La gestion des requêtes asynchrones</strong> dans les handlers : support de <code>async/await</code></p><p>✅ <strong>L&#39;utilisation de thunks de Redux</strong> pour dispatcher des actions personnalisées</p><p>✅ <strong>L&#39;intégration de l&#39;historisation</strong> : <code>history</code> pour les cas complexes, les one-liners <code>undo</code> et <code>redo</code> pour la majorité des cas</p><p>✅ <strong>Comment sortir la logique de l&#39;application du constructeur Component</strong> et gérer des intéractions complexes avec l&#39;état : <code>Updater</code> avec <code>Resolver</code>.</p>`,40)]))}const C=n(p,[["render",e]]);export{d as __pageData,C as default};
