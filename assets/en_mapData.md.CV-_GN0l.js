import{_ as n,c as a,o,ae as p}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"Connecting Data: Resolver","description":"","frontmatter":{},"headers":[],"relativePath":"en/mapData.md","filePath":"en/mapData.md"}'),l={name:"en/mapData.md"};function e(t,s,c,r,D,y){return o(),a("div",null,s[0]||(s[0]=[p(`<h1 id="connecting-data-resolver" tabindex="-1">Connecting Data: <code>Resolver</code> <a class="header-anchor" href="#connecting-data-resolver" aria-label="Permalink to &quot;Connecting Data: \`Resolver\`&quot;">​</a></h1><h2 id="recap-on-component" tabindex="-1">Recap on <code>Component</code> <a class="header-anchor" href="#recap-on-component" aria-label="Permalink to &quot;Recap on \`Component\`&quot;">​</a></h2><p>The <code>Component</code> constructor returned by <code>State</code> lets you connect a functional React component to its data <strong>and</strong> to the state‑mutation handlers in a <em>type‑safe</em> way.</p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p><code>Component</code> expects a configuration object with four properties:</p><ul><li><p><strong>domain</strong> – A unique name inside the application. It prefixes the action types dispatched from the component: <code>componentDomain/action1</code>, <code>componentDomain/action2</code>, etc. An init‑time error catches duplicated <code>domain</code> values and tells you where they occur.</p></li><li><p><strong>render</strong> – The React component responsible for displaying the provided data.</p></li><li><p><strong>data</strong> – Determines how the component receives its <strong>DataProps</strong>.</p></li><li><p><strong>handlers</strong> – Hooks the component’s event system up to the application’s state‑mutation logic via its <strong>HandlerProps</strong>.</p></li></ul><h3 id="dataprops-and-handlerprops" tabindex="-1"><code>DataProps</code> and <code>HandlerProps</code> <a class="header-anchor" href="#dataprops-and-handlerprops" aria-label="Permalink to &quot;\`DataProps\` and \`HandlerProps\`&quot;">​</a></h3><ul><li><p><strong>HandlerProps</strong> are the props whose type is either</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;"> | ((</span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Payload</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> void</span><span style="color:#D4D4D4;">)</span></span></code></pre></div><p>Each of these props is associated (under the <strong>handlers</strong> key) with a handler that can:</p><ul><li>interact with the state (often mutating it),</li><li>kick off API requests (web APIs, workers),</li><li>perform side‑effects (e.g. file‑system access).</li></ul></li><li><p><strong>DataProps</strong> are simply all the remaining props—the ones not listed in <code>HandlerProps</code>.</p></li></ul><p><strong>Example</strong></p><p>For a component of type:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListComponentProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  addTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  deleteTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  setFilter</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Its <strong>DataProps</strong> (the data to display) are:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListDataProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Its <strong>HandlerProps</strong> (user actions) are:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> TodoListHandlerProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#DCDCAA;">  addTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  toggleTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  deleteTodo</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  setFilter</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;active&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;completed&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>The rest of this section shows how to connect a component to its data via the <strong>data</strong> property—either with a <strong>static object</strong> or with a <strong>dynamic selector</strong>.</p><h2 id="connecting-with-a-static-object" tabindex="-1">Connecting with a Static Object <a class="header-anchor" href="#connecting-with-a-static-object" aria-label="Permalink to &quot;Connecting with a Static Object&quot;">​</a></h2><p>The <strong>data</strong> property can simply receive a plain object matching <code>DataProps</code>. This is handy during prototyping when the required state fields do not yet exist, or when the component only needs state access for its handlers but its displayed data are constant (e.g. a fixed‑size canvas that merely tracks pointer movement and clicks).</p><p>The resulting component is a plain <code>React.FC</code> ready to drop into JSX with <strong>no extra props</strong>.</p><p><strong>Example</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> XY</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> SensorProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerMove</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerDown</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppSensor</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // domain, render, handlers definitions …</span></span>
<span class="line"><span style="color:#6A9955;">  // data specified directly via a static object</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    width:</span><span style="color:#B5CEA8;"> 500</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    height:</span><span style="color:#B5CEA8;"> 300</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Usage in JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">AppSensor</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h3 id="handling-ownprops" tabindex="-1">Handling OwnProps <a class="header-anchor" href="#handling-ownprops" aria-label="Permalink to &quot;Handling OwnProps&quot;">​</a></h3><p><strong>OwnProps</strong> are the properties passed directly from a parent component via JSX. They become necessary when the data depend on information supplied by the parent (e.g. an item ID in a list or runtime display parameters).</p><p>If you pass a <strong>partial static object</strong> to <strong>data</strong>, any missing <code>DataProps</code> automatically become <em>required</em> OwnProps.</p><p><strong>Example with OwnProps</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> XY</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> SensorProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerMove</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  onPointerDown</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">pos</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">XY</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// data receives an empty static object</span></span>
<span class="line"><span style="color:#6A9955;">// width and height are missing → they become OwnProps</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> AppSensor</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">React</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">FC</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt; = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // domain, render, handlers …</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#D4D4D4;"> {},</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Usage in JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">AppSensor</span><span style="color:#9CDCFE;"> width</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#B5CEA8;">500</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> height</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#B5CEA8;">300</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h2 id="connecting-with-a-dynamic-selector" tabindex="-1">Connecting with a Dynamic Selector <a class="header-anchor" href="#connecting-with-a-dynamic-selector" aria-label="Permalink to &quot;Connecting with a Dynamic Selector&quot;">​</a></h2><p>The <strong>data</strong> property can also receive a selector:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">OwnProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> DataProps</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>This is the approach used in most examples so far. Supplying an object as the second parameter defines the <strong>OwnProps</strong>.</p><h3 id="resolver" tabindex="-1"><code>Resolver</code> <a class="header-anchor" href="#resolver" aria-label="Permalink to &quot;\`Resolver\`&quot;">​</a></h3><p>Inline selectors are fine for trivial cases (no need to extract <code>{ data: (state) =&gt; ({ value: state.counter }) }</code>). For more advanced scenarios the <code>Resolver</code> constructor (also returned by <code>State</code>) comes into play.</p><p><code>Resolver</code> takes a selector whose first parameter is <code>RootState</code> (typed through inference) and <em>optionally</em> a second parameter (OwnProps). It simply returns that selector, but now strongly typed.</p><p><strong>Example with <code>Resolver</code> and OwnProps</strong></p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Initial state</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">Resolver</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  counters:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    counterA:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    counterB:</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> CounterName</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;counterA&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;counterB&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> NamedCounterProps</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  increment</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  decrement</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Pure rendering component</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> NamedCounter</span><span style="color:#D4D4D4;"> = ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  increment</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  decrement</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}: </span><span style="color:#4EC9B0;">NamedCounterProps</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h3</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> decrement</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">-</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">span</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> increment</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">+</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Define the resolver</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> selectCounterByName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Resolver</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">    value:</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">ownProps</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Connected component using Resolver</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> NamedCounterComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  domain:</span><span style="color:#CE9178;"> &quot;NamedCounter&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  render:</span><span style="color:#9CDCFE;"> NamedCounter</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Dynamic selection via Resolver</span></span>
<span class="line"><span style="color:#9CDCFE;">  data:</span><span style="color:#9CDCFE;"> selectCounterByName</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">  handlers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    increment</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">      counters:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">[name]:</span><span style="color:#9CDCFE;"> counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">    decrement</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">counters</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">CounterName</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">      counters:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">[name]:</span><span style="color:#9CDCFE;"> counters</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">] - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Final registration</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">reducer</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">NamedCounterComponent</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reducer</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Usage in JSX</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">NamedCounterComponent</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;counterA&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">NamedCounterComponent</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;counterB&quot;</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><h2 id="wrap‐up" tabindex="-1">Wrap‑up <a class="header-anchor" href="#wrap‐up" aria-label="Permalink to &quot;Wrap‑up&quot;">​</a></h2><p>In this chapter we covered <strong>all the ways to hook a component up to its data</strong>:</p><p>✅ With a <strong>static object</strong></p><p>✅ With a <strong>dynamic selector</strong></p><p>✅ Using <strong>OwnProps</strong> where needed</p>`,43)]))}const d=n(l,[["render",e]]);export{C as __pageData,d as default};
