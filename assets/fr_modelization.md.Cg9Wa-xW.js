import{_ as a,c as n,o as e,ae as l}from"./chunks/framework.iBmvQ__U.js";const d=JSON.parse('{"title":"Modélisation : State, Undoable, Slice","description":"","frontmatter":{},"headers":[],"relativePath":"fr/modelization.md","filePath":"fr/modelization.md"}'),o={name:"fr/modelization.md"};function p(t,s,c,r,D,i){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="modelisation-state-undoable-slice" tabindex="-1">Modélisation : <code>State</code>, <code>Undoable</code>, <code>Slice</code> <a class="header-anchor" href="#modelisation-state-undoable-slice" aria-label="Permalink to &quot;Modélisation : \`State\`, \`Undoable\`, \`Slice\`&quot;">​</a></h1><p>La construction de votre application commence par la modélisation de son état initial via le constructeur <code>State</code> exporté par <code>scalux</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><p><code>State</code> accepte en paramètre un objet sérialisable (pas de primitive) et retourne un ensemble de constructeurs fortement typés par l&#39;état initial vous permettant de bâtir le reste de votre application avec la <strong>sécurité d&#39;un typage fort</strong> et le <strong>confort de l&#39;inférence de type</strong> poussée de Typescript.</p><p>Le pattern général est :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><p><strong>Exemple</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  tasks:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter:</span><span style="color:#CE9178;"> &quot;all&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  newItemText:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>L&#39;état initial est typé par inférence, des annotations de type peuvent être nécessaires pour préciser les types complexes (comme les unions) ou les initialisations de listes vides comme dans l&#39;exemple ci-dessus.</p><p>L&#39;état est inféré comme :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> initState</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">[]; </span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">newItemText</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilder</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// ❌  Invalid : une valeur ne doit pas être une primitive</span></span>
<span class="line"><span style="color:#6A9955;">// typescript:  Argument of type &#39;number&#39; is not assignable to parameter of type &#39;Obj&#39;</span></span></code></pre></div><h2 id="undoable" tabindex="-1">Undoable <a class="header-anchor" href="#undoable" aria-label="Permalink to &quot;Undoable&quot;">​</a></h2><p>Le modificateur <code>Undoable</code> exporté depuis &quot;scalux&quot; permet de gérer l&#39;historisation (fonctionalités undo/redo) via trois propriétés :</p><ul><li><p>present : état actuel</p></li><li><p>past : liste des états précédents</p></li><li><p>future : liste états annulés (undo)</p></li></ul><p>Lorsqu&#39;un changement survient, l&#39;ancien état est déplacé vers <code>past</code> et remplacé par le nouvel état dans <code>present</code>.</p><p><code>Undoable</code> enveloppe l&#39;état initial passé à <code>State</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Undoable</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Undoable</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }));</span></span></code></pre></div><h2 id="etat-global-rootstate-vs-etat-interne-internalstate" tabindex="-1">Etat global (RootState) vs Etat Interne (InternalState) <a class="header-anchor" href="#etat-global-rootstate-vs-etat-interne-internalstate" aria-label="Permalink to &quot;Etat global (RootState) vs Etat Interne (InternalState)&quot;">​</a></h2><p>Le <strong>RootState</strong> est la structure de données obtenue en appliquant les modifications apportées par l&#39;historisation sur la structure de données initiale : c&#39;est l&#39;état complet, tel que vu par les composants de l&#39;application. C&#39;est également le type de la valeur obtenue en retour de <code>store.getState</code> de Redux.</p><p><strong>InternalState</strong> est la structure de données enveloppée par <code>Undoable</code>, c&#39;est l&#39;état initial sans historisation. <strong>InternalState</strong> est la structure de données passée aux réducteurs de l&#39;application.</p><p>Dans l&#39;exemple du compteur :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  present</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  past</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  future</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p><em>Remarque</em>: en l&#39;absence d&#39;historique <code>InternalState</code> et <code>RootState</code> sont confondus.</p><h2 id="decouper-l-etat-avec-slice" tabindex="-1">Découper l&#39;état avec <code>Slice</code> <a class="header-anchor" href="#decouper-l-etat-avec-slice" aria-label="Permalink to &quot;Découper l&#39;état avec \`Slice\`&quot;">​</a></h2><h3 id="pourquoi-decouper-l-etat" tabindex="-1">Pourquoi découper l&#39;état ? <a class="header-anchor" href="#pourquoi-decouper-l-etat" aria-label="Permalink to &quot;Pourquoi découper l&#39;état ?&quot;">​</a></h3><p>Lorsque votre application grandit, découper son état en sous-ensembes indépendants appelés <strong>slices</strong> est <strong>une bonne pratique pour assurer une meilleure séparation des préoccupations</strong> : par exemple grouper logiquement les données métier (positions des pièces d&#39;un jeu) indépendamment des données UI (thème clair/sombre, langue).</p><p>C&#39;est parfois aussi une <strong>nécessité dans le cadre le l&#39;historisation</strong> : on ne souhaite pas que l&#39;annulation ou la répétition d&#39;un coup dans la revue d&#39;une partie d&#39;échecs entraine automatiquement un basculement entre les thèmes sombres et clairs !</p><h3 id="fonctionnement" tabindex="-1">Fonctionnement <a class="header-anchor" href="#fonctionnement" aria-label="Permalink to &quot;Fonctionnement&quot;">​</a></h3><p>Le constructeur <code>Slice</code> est également exporté par &quot;scalux&quot; et accepte comme <code>State</code> <strong>un objet sérialisable avec au moins une propriété</strong>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Slice</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">assignee</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">grade</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todosSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  tasks:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter:</span><span style="color:#CE9178;"> &quot;all&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  newItemText:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> peopleSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  people:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos:</span><span style="color:#9CDCFE;"> todosSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  people:</span><span style="color:#9CDCFE;"> peopleSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="slice-et-undoable" tabindex="-1">Slice et Undoable <a class="header-anchor" href="#slice-et-undoable" aria-label="Permalink to &quot;Slice et Undoable&quot;">​</a></h3><p>De manière analogue à <code>State</code> le contenu de l&#39;état d&#39;une <code>Slice</code> peut être enveloppé par le modificateur <code>Undoable</code> : son contenu sera alors accessible à travers les propriétés <code>sliceName.present</code>, <code>sliceName.past</code> et <code>sliceName.future</code>.</p><p><strong>Exemple</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Slice</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Undoable</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> uiSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">theme:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">language:</span><span style="color:#CE9178;"> &quot;fr&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> counterSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Undoable</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui:</span><span style="color:#9CDCFE;"> uiSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#9CDCFE;"> counterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Les états internes (<code>InternalState</code>) et globaux (<code>RootState</code>) de l&#39;application seront respectivement :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;string&quot;</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;string&quot;</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#9CDCFE;">    present</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">    past</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">    future</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><h3 id="⚠️-etat-homogene" tabindex="-1">⚠️ Etat homogène <a class="header-anchor" href="#⚠️-etat-homogene" aria-label="Permalink to &quot;⚠️ Etat homogène&quot;">​</a></h3><p>Vous ne pouvez pas mélanger des <strong>slices</strong> et des données brutes directement dans <code>State</code>. Vous devez choisir l&#39;une de ces deux approches</p><ul><li>État simple :</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><ul><li>État avec slices :</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="acceder-simplement-aux-donnees-selecteurs-integres" tabindex="-1">Accéder simplement aux données : Sélecteurs intégrés <a class="header-anchor" href="#acceder-simplement-aux-donnees-selecteurs-integres" aria-label="Permalink to &quot;Accéder simplement aux données : Sélecteurs intégrés&quot;">​</a></h2><h3 id="probleme-pose-par-l-historisation" tabindex="-1">Problème posé par l&#39;historisation <a class="header-anchor" href="#probleme-pose-par-l-historisation" aria-label="Permalink to &quot;Problème posé par l&#39;historisation&quot;">​</a></h3><p>L&#39;ajout/suppression d&#39;un historique modifie le chemin d&#39;accès aux proprités des slices</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// sans historique</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// avec historique</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">present</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>Cela dégrade fortement la maintenabilité de l&#39;app car il faut alors modifier tous les sélecteurs y faisant référence.</p><p><code>scalux</code> propose plusieurs sélecteurs dérivés de l&#39;état pour simplifier l&#39;accès aux slices et à leur propriétés de manière transparante, en tenant compte du fait que certaines propriétés sont historisées.</p><p>Les <code>selectors</code> sont une propriété en retour de la fonction <code>State</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">selectors</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Toutes sélecteurs décrits ci-dessous prennent en paramètre l&#39;état global RootState.</p><h3 id="pick" tabindex="-1">pick <a class="header-anchor" href="#pick" aria-label="Permalink to &quot;pick&quot;">​</a></h3><p>Sélectionne directement une propriété d&#39;une slice, en tenant compte automatiquement de l&#39;état actuel (<code>present</code>) si la slice est historisée.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pseudo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &quot;John&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span></code></pre></div><h3 id="rawpick" tabindex="-1">rawPick <a class="header-anchor" href="#rawpick" aria-label="Permalink to &quot;rawPick&quot;">​</a></h3><p>Renvoie la version historisée <strong>des propriétés de premier niveau</strong> pour les slices historisables</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawPick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pseudo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &quot;John&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawPick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; { present: 0, past: [], future: [] }</span></span></code></pre></div><h3 id="grab" tabindex="-1">grab <a class="header-anchor" href="#grab" aria-label="Permalink to &quot;grab&quot;">​</a></h3><p>Permet d&#39;obtenir l&#39;ensemble des données d&#39;une slice, simplifié (historisé ou non).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">grab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">User</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; { pseudo: &quot;John&quot;, age: 23 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">grab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Counter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; { count: 0 }</span></span></code></pre></div><h3 id="rawgrab" tabindex="-1">rawGrab <a class="header-anchor" href="#rawgrab" aria-label="Permalink to &quot;rawGrab&quot;">​</a></h3><p>Permet d&#39;obtenir l&#39;état complet, brut, incluant les données historiques (<code>past</code>, <code>present</code>, <code>future</code>) si la slice est historisée.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawGrab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">User</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; { pseudo: &quot;John&quot;, age: 23 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawGrab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Counter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; { present: { count: 0 }, past: [], future: [] }</span></span></code></pre></div><h3 id="internalstate" tabindex="-1">internalState <a class="header-anchor" href="#internalstate" aria-label="Permalink to &quot;internalState&quot;">​</a></h3><p>Renvoie directement l&#39;état global simplifié (équivalent du <code>present</code> pour chaque slice historisée).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">internalState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">{</span></span>
<span class="line"><span style="color:#6A9955;">  User: { pseudo: &quot;John&quot;, age: 23 },</span></span>
<span class="line"><span style="color:#6A9955;">  Counter: { count: 0 }</span></span>
<span class="line"><span style="color:#6A9955;">}</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span></code></pre></div><h3 id="rootstate" tabindex="-1">rootState <a class="header-anchor" href="#rootstate" aria-label="Permalink to &quot;rootState&quot;">​</a></h3><p>Renvoie directement l&#39;état global</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">rootState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">{</span></span>
<span class="line"><span style="color:#6A9955;">  User: { pseudo: &quot;John&quot;, age: 23 },</span></span>
<span class="line"><span style="color:#6A9955;">  Counter: { present: { count: 0 }, past: [], future: [] }</span></span>
<span class="line"><span style="color:#6A9955;">}</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span></code></pre></div><p><strong>Note :</strong> Le cas d&#39;usage des sélecteurs <code>internalState</code> et <code>rootState</code> est surtout d&#39;obtenir les types <code>InternalState</code> et <code>RootState</code> avec :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rootState</span><span style="color:#D4D4D4;">&gt;;</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">internalState</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><h3 id="cas-d-un-etat-simple" tabindex="-1">Cas d&#39;un état simple <a class="header-anchor" href="#cas-d-un-etat-simple" aria-label="Permalink to &quot;Cas d&#39;un état simple&quot;">​</a></h3><p>Dans le cas d&#39;un état simple (sans <code>Slice</code>), les sélecteurs (pick, grab, etc.) préfixent directement les propriétés qu&#39;ils pointent :</p><p><strong>Exemple</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span></code></pre></div><h2 id="initdata" tabindex="-1">initData <a class="header-anchor" href="#initdata" aria-label="Permalink to &quot;initData&quot;">​</a></h2><p>Egalement dans l&#39;objet retourné par <code>State</code>, contient l&#39;état interne initial (analogue à getState pour l&#39;état initial). S&#39;utilise dans les fonctionnalités <code>reset</code> (par exemple resetCount dans un compteur).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">selectors</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">initData</span><span style="color:#4FC1FF;"> register</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">mkLogger</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">initData</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// { User: { pseudo: &quot;John&quot;, age: 23 }, Counter: { count: 0 } }</span></span></code></pre></div><h2 id="tooling" tabindex="-1">Tooling <a class="header-anchor" href="#tooling" aria-label="Permalink to &quot;Tooling&quot;">​</a></h2><p>A des fins de debugging, <code>State</code> renvoie également une propriété <code>mkLogger</code>.</p><p><code>mkLogger</code>:</p><ul><li>prend en paramètres : <ul><li>un sélecteur de propriété de l&#39;état global</li><li>un displayName (string) pour la propriété à suivre</li></ul></li><li>renvoie un middleware <code>redux</code></li></ul><p>Ce middleware log dans la console :</p><ul><li><p>dans l&#39;état initial:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Init value for \`\${displayName}\`: \`\${propValue}\`</span></span>
<span class="line"><span>==================================================</span></span></code></pre></div></li><li><p>puis à chaque changement de valeur de la propriété :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>  Prop \`\${displayName}\` changed</span></span>
<span class="line"><span>  Previous value: \`\${prevValue}\`</span></span>
<span class="line"><span>  Next value: \`\${nextValue}\`</span></span>
<span class="line"><span>  ================================================</span></span></code></pre></div></li></ul><p><code>scalux</code> est pleinement compatible avec redux-toolkit permettant le suivi des évolutions de l&#39;état.</p><p>Ce middleware est pratique pour observer une propriété évoluant occasionnellement, sans devoir parcourir l&#39;arbre d&#39;état à chaque action pour observer ses éventuels changements. Il est particulièrement adapté au suivi des transitions d&#39;une machine à états (section suivante).</p>`,89)]))}const u=a(o,[["render",p]]);export{d as __pageData,u as default};
