import{_ as n,c as a,o,ae as l}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"State Machines","description":"","frontmatter":{},"headers":[],"relativePath":"en/machines.md","filePath":"en/machines.md"}'),p={name:"en/machines.md"};function e(t,s,c,r,D,y){return o(),a("div",null,s[0]||(s[0]=[l(`<h1 id="state-machines" tabindex="-1">State Machines <a class="header-anchor" href="#state-machines" aria-label="Permalink to &quot;State Machines&quot;">​</a></h1><h2 id="problem-statement" tabindex="-1">Problem Statement <a class="header-anchor" href="#problem-statement" aria-label="Permalink to &quot;Problem Statement&quot;">​</a></h2><p>A component may need to react to the <strong>same event</strong> in different ways depending on the current application state.</p><p>Typical examples:</p><ul><li>Video games</li><li>Drawing canvases</li></ul><p>A simple case: a <strong>push button</strong></p><ul><li>One event: <code>press button</code></li><li>Two states: <code>on</code> or <code>off</code></li><li>Two possible actions depending on the current state: <ul><li>If the state is <code>on</code> → action: turn <strong>off</strong></li><li>If the state is <code>off</code> → action: turn <strong>on</strong></li></ul></li></ul><p>Such a tiny automaton does <strong>not</strong> warrant any special methodology:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">status:</span><span style="color:#CE9178;"> &quot;on&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;on&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;off&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleSwitch</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  status:</span><span style="color:#9CDCFE;"> status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;on&quot;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#CE9178;">&quot;off&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;on&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span></code></pre></div><p>Now consider something more involved:</p><ul><li>A board game (chess, for instance).</li><li>A <code>Board</code> component dealing with two events: <code>click</code> and <code>cursor move</code>.</li><li>Moving a piece requires several steps: <ol><li>Click a piece to <strong>select</strong> it</li><li>Move the cursor (the piece follows the cursor)</li><li>Click a target square to <strong>drop</strong> the piece</li></ol></li></ul><p>The reaction to an event now depends on multiple factors:</p><ul><li><strong>Selection state</strong><ul><li>If no piece is selected → select the clicked piece.</li><li>If a piece is selected → drop that piece on the new square.</li></ul></li><li><strong>Player’s turn</strong><ul><li>If it <em>is</em> the active player’s turn → play the move immediately.</li><li>Otherwise → <strong>pre‑record</strong> the move, to be executed automatically when their turn comes (unless cancelled).</li></ul></li></ul><p>Example of rapidly growing conditional logic:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  selectedPiece:</span><span style="color:#569CD6;"> null</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> null</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  turn:</span><span style="color:#CE9178;"> &quot;white&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  player:</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // other game properties</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> boardClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  ({ </span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">turn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">player</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">clickedPiece</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">player</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">turn</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // drop logic</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // select logic</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">selectedPiece</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // pre‑record move logic</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // pre‑select or other action</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Even with only three properties (<code>selectedPiece</code>, <code>turn</code>, <code>player</code>) readability drops quickly; in larger scenarios this pattern becomes unmanageable.</p><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to &quot;Modes&quot;">​</a></h2><p>Finite‑state machines are a cornerstone of computer science, backed by strong theory. In <strong>scalux</strong> we adopt a streamlined approach:</p><ul><li>Designing an automaton means naming states and assigning them dedicated event handling.</li><li>These named states are called <strong>modes</strong>—a familiar term in apps (game mode, draw mode, selection mode…).</li></ul><p>Using modes avoids deeply nested conditionals and boosts both clarity and maintainability.</p><h2 id="instantiating-an-automaton-machine" tabindex="-1">Instantiating an Automaton: <code>Machine</code> <a class="header-anchor" href="#instantiating-an-automaton-machine" aria-label="Permalink to &quot;Instantiating an Automaton: \`Machine\`&quot;">​</a></h2><p><code>scalux</code> lets you declare modes expressively through <strong>trees</strong>.</p><h3 id="machine" tabindex="-1"><code>Machine</code> <a class="header-anchor" href="#machine" aria-label="Permalink to &quot;\`Machine\`&quot;">​</a></h3><p>Accepts a <em>tree</em> of modes. By convention <strong>leaves</strong> are <code>null</code>.</p><h3 id="modestree" tabindex="-1"><code>modesTree</code> <a class="header-anchor" href="#modestree" aria-label="Permalink to &quot;\`modesTree\`&quot;">​</a></h3><p>Returned by the <code>Machine</code> constructor. Its leaves are strings composed of the path to each leaf in the input tree, with keys separated by <code>/</code>. These strings form the set of modes for the machine.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Machine</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TreePaths</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// sub‑modes</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> playingModes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  piecePicking:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  pieceDumping:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// main modes</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> modes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  userPlaying:</span><span style="color:#9CDCFE;"> playingModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  opponentPlaying:</span><span style="color:#9CDCFE;"> playingModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/state/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Modes</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;../machines&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  selectedPiece:</span><span style="color:#569CD6;"> null</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> null</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  turn:</span><span style="color:#CE9178;"> &quot;white&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  player:</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#C586C0;"> as</span><span style="color:#CE9178;"> &quot;black&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;white&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  currentMode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// &quot;opponentPlaying/piecePicking&quot;</span></span>
<span class="line"><span style="color:#6A9955;">  // other game properties</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> boardClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">clickedPiece</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // a piece is selected → switch to dumping mode</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pieceDumping</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // …other selection updates</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">userPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pieceDumping</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // move played, opponent’s turn, maybe play a pre‑move</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // …other dropping updates</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // opponent selects a piece → stay in dumping sub‑mode</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pieceDumping</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // …other pre‑selection updates</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#6A9955;">  // currentMode is opponentPlaying.pieceDumping</span></span>
<span class="line"><span style="color:#C586C0;">  else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // piece dropped, go back to picking mode while waiting</span></span>
<span class="line"><span style="color:#9CDCFE;">      mode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">opponentPlaying</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">piecePicking</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // …other pre‑drop updates</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Conditional logic is now <strong>flattened</strong>—the dedicated <code>mode</code> state drives all branching, dramatically reducing complexity and improving readability.</p><h2 id="macro‐modes-and-sub‐modes" tabindex="-1">Macro‑modes and Sub‑modes <a class="header-anchor" href="#macro‐modes-and-sub‐modes" aria-label="Permalink to &quot;Macro‑modes and Sub‑modes&quot;">​</a></h2><ul><li><strong>macroMode</strong>: a <em>partial</em> path starting at the root</li><li><strong>subMode</strong>: a <em>partial</em> path ending at a leaf</li></ul><p>Take the (simplified) modes of an <strong>architectural design</strong> app:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Machine</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TreePaths</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux/helpers&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> viewModes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  wall:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    firstPoint:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    secondPoint:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;">  navigate:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> modes</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  root:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    planeView:</span><span style="color:#9CDCFE;"> viewModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    view3D:</span><span style="color:#9CDCFE;"> viewModes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">subModes</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>When modes rely heavily on composition you often want two kinds of transitions:</p><ol><li><strong>Change the macroMode while preserving the subMode</strong> – e.g. from <code>root/planeView/wall/firstPoint</code> to <code>root/view3D/wall/firstPoint</code>.</li><li><strong>Change the subMode while preserving the macroMode</strong> – e.g. from <code>root/planeView/wall/firstPoint</code> to <code>root/planeView/wall/secondPoint</code>.</li></ol><p>The object returned by <code>Machine</code> therefore exposes two helpers: <code>macroModes</code> and <code>subModes</code>.</p><p>Both functions receive a macroMode (respectively subMode) and return an object with:</p><ul><li><strong>match</strong>: <code>(mode) =&gt; boolean</code> – does the given mode contain the macroMode/subMode?</li><li><strong>next</strong>: <code>(newMacroOrSub, mode) =&gt; mode</code> – returns an updated mode where the macro or sub part is replaced. Types guarantee that <code>next</code> cannot produce an invalid path.</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>In our drawing app:</p><ul><li>We want to toggle between <em>plan view</em> and <em>3‑D view</em> <strong>without</strong> altering the drawing sub‑mode.</li><li>Inside a drawing sub‑mode: <ul><li><strong>click</strong> cycles <code>navigate → firstPoint</code>, <code>firstPoint → secondPoint</code>, <code>secondPoint → navigate</code>.</li><li><strong>escape</strong> backs up: <code>secondPoint → firstPoint</code>, <code>firstPoint → navigate</code>, <code>navigate → navigate</code>.</li></ul></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/state/index.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">subModes</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Modes</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;../machines&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Updater</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  currentMode:</span><span style="color:#9CDCFE;"> modesTree</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">navigate</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> toggleViewKind</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> planeView</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> view3D</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/view3D&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/view3D&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // otherwise we are in view3D</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> view3D</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> navigate</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> firstPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> secondPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">subModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/secondPoint&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleClick</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">navigate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> navigate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/secondPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // we must be in &quot;wall/secondPoint&quot;</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> handleEscape</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Updater</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> firstPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;navigate&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">currentMode:</span><span style="color:#9CDCFE;"> secondPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wall/firstPoint&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">) };</span></span>
<span class="line"><span style="color:#6A9955;">  // already in &quot;navigate&quot; – no change needed</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {};</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="mode-options" tabindex="-1">Mode Options <a class="header-anchor" href="#mode-options" aria-label="Permalink to &quot;Mode Options&quot;">​</a></h2><p>Some components may need data that can be <strong>derived</strong> from the current mode.</p><p>Example: a prop <code>{ viewKind: &quot;planeView&quot; | &quot;view3D&quot; }</code> for a <code>Controls</code> component in a drawing app, to enable/disable camera rotations.</p><p>You <em>could</em> build that prop with <code>subModes</code>, but it is not very expressive:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> planeView</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">macroModes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root/planeView&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> mkViewKind</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Mode</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#9CDCFE;"> planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">) ? </span><span style="color:#CE9178;">&quot;planeView&quot;</span><span style="color:#D4D4D4;"> : </span><span style="color:#CE9178;">&quot;view3D&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p><code>Machine</code> also returns <code>mkModeOptions</code>. It accepts a function that receives the modes tree and returns a <strong>dictionary</strong> whose values are lists of <strong>internal nodes</strong>.</p><p>For each dictionary key, <code>mkModeOptions</code> provides a selector that takes a mode and returns the key of the child node traversed by that mode (or <code>undefined</code> if the mode is outside the listed nodes).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/machines/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// modes defined as before …</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> machine</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Machine</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">modes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">mkModeOptions</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">machine</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> modeOptions</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkModeOptions</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  wallMode:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">planeView</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wall</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">view3D</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wall</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">modesTree</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">macroModes</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">subModes</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">machine</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> type</span><span style="color:#4EC9B0;"> Modes</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TreePaths</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> modes</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><p>Here <code>modeOptions</code> has the type:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> ModeOptions</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#DCDCAA;">  viewKind</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Modes</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &quot;planeView&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;view3D&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  wallMode</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Modes</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &quot;firstPoint&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;secondPoint&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>Our previous snippet simplifies to:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> mkViewKind</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Mode</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  viewKind:</span><span style="color:#9CDCFE;"> modeOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">viewKind</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h2 id="visualizing-transitions" tabindex="-1">Visualizing Transitions <a class="header-anchor" href="#visualizing-transitions" aria-label="Permalink to &quot;Visualizing Transitions&quot;">​</a></h2><p>The <code>mkLogger</code> helper (see <em>Advanced Modeling</em>) is handy for tracking mode changes:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">mkLogger</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">RootState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;state&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logCurrentMode</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mkLogger</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RootState</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">currentMode</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &quot;currentMode&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Initial output:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Init value for currentMode: &quot;root/planeView/wall/firstPoint&quot;</span></span>
<span class="line"><span>================================================</span></span></code></pre></div><p>Then on every mode change:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Prop currentMode changed</span></span>
<span class="line"><span>Previous value: &quot;root/planeView/wall/firstPoint&quot;</span></span>
<span class="line"><span>Next value: &quot;root/planeView/wall/secondPoint&quot;</span></span>
<span class="line"><span>================================================</span></span></code></pre></div>`,61)]))}const d=n(p,[["render",e]]);export{C as __pageData,d as default};
