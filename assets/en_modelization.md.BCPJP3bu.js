import{_ as a,c as n,o,ae as e}from"./chunks/framework.iBmvQ__U.js";const C=JSON.parse('{"title":"Modeling: State, Undoable, Slice","description":"","frontmatter":{},"headers":[],"relativePath":"en/modelization.md","filePath":"en/modelization.md"}'),l={name:"en/modelization.md"};function p(t,s,c,r,D,i){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="modeling-state-undoable-slice" tabindex="-1">Modeling: <code>State</code>, <code>Undoable</code>, <code>Slice</code> <a class="header-anchor" href="#modeling-state-undoable-slice" aria-label="Permalink to &quot;Modeling: \`State\`, \`Undoable\`, \`Slice\`&quot;">​</a></h1><p>Building your application starts with modeling its <strong>initial state</strong> via the <code>State</code> constructor exported by <strong>scalux</strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h2 id="state" tabindex="-1"><code>State</code> <a class="header-anchor" href="#state" aria-label="Permalink to &quot;\`State\`&quot;">​</a></h2><p><code>State</code> takes a <strong>serialisable object</strong> (no primitives at the top level) and returns a set of strongly‑typed builders you’ll use to construct the rest of the app—with both the <strong>safety of static typing</strong> <em>and</em> the <strong>ergonomics of TypeScript inference</strong>.</p><p>General pattern:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><p><strong>Example</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  tasks:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter:</span><span style="color:#CE9178;"> &quot;all&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  newItemText:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>The initial state is inferred; explicit annotations may be needed for complex types (unions, empty arrays, …).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InitState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">[]; </span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">newItemText</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// ❌  Invalid: a primitive value is not allowed</span></span>
<span class="line"><span style="color:#6A9955;">// TypeScript: Argument of type &#39;number&#39; is not assignable to parameter of type &#39;Obj&#39;.</span></span></code></pre></div><h2 id="undoable" tabindex="-1"><code>Undoable</code> <a class="header-anchor" href="#undoable" aria-label="Permalink to &quot;\`Undoable\`&quot;">​</a></h2><p>The <code>Undoable</code> modifier (exported by <strong>scalux</strong>) adds history management (undo/redo) through three properties:</p><ul><li><strong>present</strong> – the current state</li><li><strong>past</strong> – a stack of previous states</li><li><strong>future</strong> – a stack of undone states</li></ul><p>Whenever a change occurs, the old state is pushed onto <code>past</code> and replaced by the new state in <code>present</code>.</p><p><code>Undoable</code> wraps the initial state passed to <code>State</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Undoable</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Undoable</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }));</span></span></code></pre></div><h2 id="global-vs-internal-state" tabindex="-1">Global vs. Internal State <a class="header-anchor" href="#global-vs-internal-state" aria-label="Permalink to &quot;Global vs. Internal State&quot;">​</a></h2><ul><li><strong>RootState</strong> is the data structure obtained <em>after</em> history is applied. It is the <em>complete</em> state seen by components and the type returned by <code>store.getState()</code>.</li><li><strong>InternalState</strong> is the data wrapped <em>inside</em> <code>Undoable</code>—the pristine state without history. Reducers operate on this structure.</li></ul><p>For the counter example:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  present</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  past</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">  future</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p><em>Note</em>: If there is <strong>no</strong> history, <code>InternalState</code> and <code>RootState</code> are identical.</p><h2 id="splitting-state-with-slice" tabindex="-1">Splitting State with <code>Slice</code> <a class="header-anchor" href="#splitting-state-with-slice" aria-label="Permalink to &quot;Splitting State with \`Slice\`&quot;">​</a></h2><h3 id="why-slice-the-state" tabindex="-1">Why slice the state? <a class="header-anchor" href="#why-slice-the-state" aria-label="Permalink to &quot;Why slice the state?&quot;">​</a></h3><p>As an app grows, splitting state into independent <strong>slices</strong> is a good practice for clearer <strong>separation of concerns</strong>—e.g. business data (chess piece positions) vs. UI data (dark/light theme, language).</p><p>It is sometimes a <strong>requirement</strong> with history: undoing a chess move should <em>not</em> toggle the colour theme!</p><h3 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><p><code>Slice</code> (also exported by <strong>scalux</strong>) accepts, like <code>State</code>, a <em>serialisable object with at least one property</em>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Slice</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">assignee</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">grade</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> todosSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  tasks:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#9CDCFE;">  filter:</span><span style="color:#CE9178;"> &quot;all&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  newItemText:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> peopleSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  people:</span><span style="color:#D4D4D4;"> [] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> Person</span><span style="color:#D4D4D4;">[],</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  todos:</span><span style="color:#9CDCFE;"> todosSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  people:</span><span style="color:#9CDCFE;"> peopleSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="slice-and-undoable" tabindex="-1">Slice <strong>and</strong> Undoable <a class="header-anchor" href="#slice-and-undoable" aria-label="Permalink to &quot;Slice **and** Undoable&quot;">​</a></h3><p>Just like with <code>State</code>, the content of a <code>Slice</code> can be wrapped in <code>Undoable</code>; its data are then accessed through <code>sliceName.present</code>, <code>sliceName.past</code>, and <code>sliceName.future</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Slice</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">State</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Undoable</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;scalux&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> uiSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">theme:</span><span style="color:#CE9178;"> &quot;light&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">language:</span><span style="color:#CE9178;"> &quot;fr&quot;</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> counterSlice</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Undoable</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> appBuilders</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui:</span><span style="color:#9CDCFE;"> uiSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter:</span><span style="color:#9CDCFE;"> counterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Resulting state types:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  ui</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">theme</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">language</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">  counter</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#9CDCFE;">    present</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">    past</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#9CDCFE;">    future</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }[];</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><h3 id="⚠️-homogeneous-state" tabindex="-1">⚠️ Homogeneous state <a class="header-anchor" href="#⚠️-homogeneous-state" aria-label="Permalink to &quot;⚠️ Homogeneous state&quot;">​</a></h3><p>You <strong>cannot</strong> mix raw data and slices in the same <code>State</code>. Choose <strong>one</strong> approach:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Simple state</span></span>
<span class="line"><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;"> });</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// State with slices</span></span>
<span class="line"><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;"> });</span></span></code></pre></div><h2 id="easy-data-access-built‐in-selectors" tabindex="-1">Easy Data Access: Built‑in Selectors <a class="header-anchor" href="#easy-data-access-built‐in-selectors" aria-label="Permalink to &quot;Easy Data Access: Built‑in Selectors&quot;">​</a></h2><h3 id="the-problem-with-history" tabindex="-1">The problem with history <a class="header-anchor" href="#the-problem-with-history" aria-label="Permalink to &quot;The problem with history&quot;">​</a></h3><p>Adding/removing history changes property paths:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Without history</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// With history</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">present</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>Maintaining code becomes painful. <strong>scalux</strong> offers several selectors that transparently account for historical slices.</p><p>Selectors are exposed on the object returned by <code>State</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">selectors</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">register</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Each selector below takes the global <code>RootState</code>.</p><h4 id="pick" tabindex="-1"><code>pick</code> <a class="header-anchor" href="#pick" aria-label="Permalink to &quot;\`pick\`&quot;">​</a></h4><p>Directly selects a <strong>property</strong> of a slice, automatically drilling into <code>present</code> if the slice is undoable.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pseudo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &quot;John&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span></code></pre></div><h4 id="rawpick" tabindex="-1"><code>rawPick</code> <a class="header-anchor" href="#rawpick" aria-label="Permalink to &quot;\`rawPick\`&quot;">​</a></h4><p>Returns the <em>raw</em> historised version of <strong>top‑level properties</strong> when the slice is undoable.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawPick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pseudo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &quot;John&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawPick</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Counter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// { present: 0, past: [], future: [] }</span></span></code></pre></div><h4 id="grab" tabindex="-1"><code>grab</code> <a class="header-anchor" href="#grab" aria-label="Permalink to &quot;\`grab\`&quot;">​</a></h4><p>Gets the <strong>whole slice</strong>—simplified, whether historised or not.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">grab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">User</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// { pseudo: &quot;John&quot;, age: 23 }</span></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">grab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Counter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// { count: 0 }</span></span></code></pre></div><h4 id="rawgrab" tabindex="-1"><code>rawGrab</code> <a class="header-anchor" href="#rawgrab" aria-label="Permalink to &quot;\`rawGrab\`&quot;">​</a></h4><p>Gets the <strong>raw</strong> slice, including <code>past</code>, <code>present</code>, <code>future</code> if undoable.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawGrab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">User</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// { pseudo: &quot;John&quot;, age: 23 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rawGrab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Counter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// { present: { count: 0 }, past: [], future: [] }</span></span></code></pre></div><h4 id="internalstate" tabindex="-1"><code>internalState</code> <a class="header-anchor" href="#internalstate" aria-label="Permalink to &quot;\`internalState\`&quot;">​</a></h4><p>Returns the simplified <em>global</em> state (equivalent to <code>present</code> for each undoable slice).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">internalState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">{</span></span>
<span class="line"><span style="color:#6A9955;">  User: { pseudo: &quot;John&quot;, age: 23 },</span></span>
<span class="line"><span style="color:#6A9955;">  Counter: { count: 0 }</span></span>
<span class="line"><span style="color:#6A9955;">}</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span></code></pre></div><h4 id="rootstate" tabindex="-1"><code>rootState</code> <a class="header-anchor" href="#rootstate" aria-label="Permalink to &quot;\`rootState\`&quot;">​</a></h4><p>Returns the full global state.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">rootState</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">{</span></span>
<span class="line"><span style="color:#6A9955;">  User: { pseudo: &quot;John&quot;, age: 23 },</span></span>
<span class="line"><span style="color:#6A9955;">  Counter: { present: { count: 0 }, past: [], future: [] }</span></span>
<span class="line"><span style="color:#6A9955;">}</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span></code></pre></div><p><em>Tip</em>: use them to derive the <code>RootState</code> and <code>InternalState</code> types:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> RootState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rootState</span><span style="color:#D4D4D4;">&gt;;</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> InternalState</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">internalState</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre></div><h3 id="simple‐state-case" tabindex="-1">Simple‑state case <a class="header-anchor" href="#simple‐state-case" aria-label="Permalink to &quot;Simple‑state case&quot;">​</a></h3><p>With no slices the selectors are <em>prefixed directly</em> with the property names:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">selectors</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pick</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span></code></pre></div><h2 id="initdata" tabindex="-1"><code>initData</code> <a class="header-anchor" href="#initdata" aria-label="Permalink to &quot;\`initData\`&quot;">​</a></h2><p>Also returned by <code>State</code>, <code>initData</code> contains the <strong>initial internal state</strong>—handy for implementing <code>reset</code> features.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">initData</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">State</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">User:</span><span style="color:#9CDCFE;"> UserSlice</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Counter:</span><span style="color:#9CDCFE;"> CounterSlice</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">initData</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// { User: { pseudo: &quot;John&quot;, age: 23 }, Counter: { count: 0 } }</span></span></code></pre></div><hr><h2 id="tooling" tabindex="-1">Tooling <a class="header-anchor" href="#tooling" aria-label="Permalink to &quot;Tooling&quot;">​</a></h2><p>For debugging, <code>State</code> exposes <code>mkLogger</code>.</p><p><code>mkLogger</code>:</p><ol><li>Takes <ul><li>a selector of a global‑state property</li><li>a <em>display name</em> for that property</li></ul></li><li>Returns a Redux middleware that logs: <ul><li><strong>initial value</strong></li><li>every <strong>subsequent change</strong></li></ul></li></ol><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>Init value for &lt;displayName&gt;: &lt;value&gt;</span></span>
<span class="line"><span>================================================</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prop &lt;displayName&gt; changed</span></span>
<span class="line"><span>Previous value: &lt;prev&gt;</span></span>
<span class="line"><span>Next value: &lt;next&gt;</span></span>
<span class="line"><span>================================================</span></span></code></pre></div><p>scalux plays nicely with Redux Toolkit, so you can monitor state evolution easily.</p><p><code>mkLogger</code> is particularly useful for tracking <strong>state‑machine transitions</strong> (see next section).</p>`,81)]))}const d=a(l,[["render",p]]);export{C as __pageData,d as default};
